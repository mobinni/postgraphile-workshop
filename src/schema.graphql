type SpendActivityDetails implements Activity {
  canonicalId: String!
  accountId: String!
  amount: String
  currency: String
  type: String!
  subType: String
  status: String
  visible: Boolean!
  occurredAt: Datetime!
  createdAt: Datetime!
  updatedAt: Datetime!
  fxRate: BigFloat
}

interface Activity {
  canonicalId: String!
  accountId: String!
  amount: String
  currency: String
  type: String!
  subType: String
  status: String
  visible: Boolean!
  occurredAt: Datetime!
  createdAt: Datetime!
  updatedAt: Datetime!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

type P2PActivityDetails implements Activity {
  canonicalId: String!
  accountId: String!
  amount: String
  currency: String
  type: String!
  subType: String
  status: String
  visible: Boolean!
  occurredAt: Datetime!
  createdAt: Datetime!
  updatedAt: Datetime!
  p2PHandle: String
}

"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads and enables pagination through a set of `Activity`."""
  allActivities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Activity`."""
    orderBy: [ActivityOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActivityCondition
  ): ActivityConnection
}

"""A connection to a list of `Activity` values."""
type ActivityConnection {
  """A list of `Activity` objects."""
  nodes: [Activity]!

  """
  A list of edges which contains the `Activity` and cursor to aid in pagination.
  """
  edges: [ActivityEdge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Activity` you could get from the connection."""
  totalCount: Int!
}

"""A `Activity` edge in the connection."""
type ActivityEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Activity` at the end of the edge."""
  node: Activity
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Activity`."""
enum ActivityOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  CANONICAL_ID_ASC
  CANONICAL_ID_DESC
}

"""
A condition to be used against `Activity` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ActivityCondition {
  """Checks for equality with the object’s `canonicalId` field."""
  canonicalId: String
}