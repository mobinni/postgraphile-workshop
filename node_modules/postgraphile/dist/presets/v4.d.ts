/// <reference types="node" />
import "graphile-config";
import type { GraphQLError } from "graphql";
import type { IncomingMessage, ServerResponse } from "http";
import { PgV4BehaviorPlugin } from "../plugins/PgV4BehaviorPlugin.js";
import { PgV4InflectionPlugin } from "../plugins/PgV4InflectionPlugin.js";
import { PgV4SmartTagsPlugin } from "../plugins/PgV4SmartTagsPlugin.js";
export { PgV4BehaviorPlugin, PgV4InflectionPlugin, PgV4SmartTagsPlugin };
type PromiseOrDirect<T> = T | Promise<T>;
type DirectOrCallback<Request, T> = T | ((req: Request) => PromiseOrDirect<T>);
export interface V4GraphileBuildOptions {
    pgUseCustomNetworkScalars?: boolean;
    pgStrictFunctions?: boolean;
    orderByNullsLast?: boolean;
}
export interface V4Options<Request extends IncomingMessage = IncomingMessage, Response extends ServerResponse = ServerResponse> {
    /**
     * - 'only': connections will be avoided, preferring lists
     * - 'omit': lists will be avoided, preferring connections
     * - 'both': both lists and connections will be generated
     */
    simpleCollections?: "only" | "both" | "omit";
    classicIds?: boolean;
    setofFunctionsContainNulls?: boolean;
    dynamicJson?: boolean;
    jwtPgTypeIdentifier?: string;
    jwtSecret?: string;
    disableDefaultMutations?: boolean;
    ignoreIndexes?: boolean;
    appendPlugins?: GraphileConfig.Plugin[];
    skipPlugins?: GraphileConfig.Plugin[];
    /** @deprecated Please use grafast.context 'pgSettings' key instead */
    pgSettings?: DirectOrCallback<Request | undefined, {
        [key: string]: string | null | undefined;
    }>;
    /** @deprecated Please use grafast.context callback instead */
    additionalGraphQLContextFromRequest?: (req: Request | undefined, res: Response | undefined) => Promise<Record<string, any>>;
    subscriptions?: boolean;
    ignoreRBAC?: boolean;
    graphileBuildOptions?: V4GraphileBuildOptions;
    retryOnInitFail?: boolean | ((error: Error, attempts: number) => boolean | Promise<boolean>);
    graphqlRoute?: string;
    graphiqlRoute?: string;
    eventStreamRoute?: string;
    graphiql?: boolean;
    /** Always ignored, ruru is always enhanced. */
    enhanceGraphiql?: boolean;
    allowExplain?: boolean;
    handleErrors?: (error: readonly GraphQLError[]) => readonly GraphQLError[];
    /**
     * As of PostGraphile v5, query batching is no longer supported. Query batching
     * has not been standardized as part of the GraphQL-over-HTTP specification
     * efforts, and the need for it has been significantly reduced with the ubiquity
     * of HTTP2+ servers. Further, with incremental delivery (`@stream`/`@defer`)
     * on the horizon, query batching will develop a lot of unnecessary complexity
     * that handling at the network layer would bypass.
     *
     * @deprecated Use HTTP2+ instead
     */
    enableQueryBatching?: never;
    sortExport?: boolean;
    exportGqlSchemaPath?: string;
    exportJsonSchemaPath?: string;
    watchPg?: boolean;
}
export declare const makeV4Preset: (options?: V4Options) => GraphileConfig.Preset;
export declare const V4Preset: GraphileConfig.Preset;
export default V4Preset;
//# sourceMappingURL=v4.d.ts.map