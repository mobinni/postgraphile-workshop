import "graphile-config";
import type { NodeIdCodec, NodeIdHandler } from "grafast";
declare global {
    namespace GraphileBuild {
        interface Inflection {
            nodeIdFieldName(this: Inflection): string;
        }
        interface Build {
            [NODE_ID_CODECS]: {
                [codecName: string]: NodeIdCodec;
            };
            [NODE_ID_HANDLER_BY_TYPE_NAME]: {
                [typeName: string]: NodeIdHandler;
            };
            registerNodeIdCodec(codecName: string, codec: NodeIdCodec): void;
            getNodeIdCodec(codecName: string): NodeIdCodec;
            registerNodeIdHandler(matcher: NodeIdHandler): void;
            getNodeIdHandler(typeName: string): NodeIdHandler | undefined;
            getNodeTypeNames(): string[];
        }
        interface ScopeObjectFieldsField {
            isRootNodeField?: boolean;
        }
    }
}
/**
 * @internal
 */
export declare const NODE_ID_CODECS: unique symbol;
/**
 * @internal
 */
export declare const NODE_ID_HANDLER_BY_TYPE_NAME: unique symbol;
export declare const NodePlugin: GraphileConfig.Plugin;
//# sourceMappingURL=NodePlugin.d.ts.map