"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeAccessorPlugin = void 0;
require("graphile-config");
const grafast_1 = require("grafast");
const utils_js_1 = require("../utils.js");
const version_js_1 = require("../version.js");
const specForHandler = (handler, codec) => {
    function spec(nodeId) {
        // We only want to return the specifier if it matches
        // this handler; otherwise return null.
        try {
            const specifier = codec.decode(nodeId);
            if (handler.match(specifier)) {
                return specifier;
            }
        }
        catch {
            // Ignore errors
        }
        return null;
    }
    spec.displayName = `specifier_${handler.typeName}_${handler.codecName}`;
    spec.isSyncAndSafe = true; // Optimization
    return spec;
};
exports.NodeAccessorPlugin = {
    name: "NodeAccessorPlugin",
    description: "Adds accessors for the various types registered with the Global Unique Object Identification ID (Node ID) system",
    version: version_js_1.version,
    inflection: {
        add: {
            nodeById(options, typeName) {
                return this.camelCase(typeName);
            },
        },
    },
    schema: {
        hooks: {
            GraphQLObjectType_fields(fields, build, context) {
                if (!build.getNodeTypeNames) {
                    return fields;
                }
                const { graphql: { GraphQLNonNull, GraphQLID }, } = build;
                const { scope: { isRootQuery }, } = context;
                if (!isRootQuery) {
                    return fields;
                }
                const typeNames = build.getNodeTypeNames();
                const nodeIdFieldName = build.inflection.nodeIdFieldName();
                return typeNames.reduce((memo, typeName) => {
                    // Don't add a field for 'Query'
                    if (typeName === build.inflection.builtin("Query")) {
                        return memo;
                    }
                    const handler = build.getNodeIdHandler(typeName);
                    const codec = build.getNodeIdCodec(handler.codecName);
                    return build.extend(memo, {
                        [build.inflection.nodeById(typeName)]: {
                            args: {
                                [nodeIdFieldName]: {
                                    description: `The globally unique \`ID\` to be used in selecting a single \`${typeName}\`.`,
                                    type: new GraphQLNonNull(GraphQLID),
                                },
                            },
                            type: build.getOutputTypeByName(typeName),
                            description: `Reads a single \`${typeName}\` using its globally unique \`ID\`.`,
                            deprecationReason: handler.deprecationReason,
                            plan: (0, utils_js_1.EXPORTABLE)((codec, handler, lambda, nodeIdFieldName, specForHandler) => function plan(_$parent, args) {
                                const $decoded = lambda(args.get(nodeIdFieldName), specForHandler(handler, codec));
                                return handler.get(handler.getSpec($decoded));
                            }, [codec, handler, grafast_1.lambda, nodeIdFieldName, specForHandler]),
                        },
                    }, `Adding ${typeName} by NodeId field`);
                }, fields);
            },
        },
    },
};
//# sourceMappingURL=NodeAccessorPlugin.js.map