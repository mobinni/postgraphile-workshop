import type { GraphQLNamedType, GraphQLScalarTypeConfig } from "graphql";
import { GraphQLObjectType } from "graphql";
export declare function EXPORTABLE<T, TScope extends any[]>(factory: (...args: TScope) => T, args: [...TScope]): T;
/**
 * Loops over all the given `keys` and binds the method of that name on `obj`
 * to `obj` so that destructuring `build`/etc won't relate in broken `this`
 * references.
 */
declare const bindAll: (obj: object, keys: Array<string>) => object;
export { bindAll };
export declare const constantCaseAll: (str: string) => string;
/**
 * Applies the given format function `fn` to a string, but maintains any
 * leading/trailing underscores.
 */
export declare const formatInsideUnderscores: (fn: (input: string) => string) => (str: string) => string;
export declare const upperFirst: (str: string) => string;
export declare const camelCase: (str: string) => string;
export declare const constantCase: (str: string) => string;
export declare const upperCamelCase: (str: string) => string;
export declare const pluralize: (str: string) => string;
export declare const singularize: (str: string) => string;
/**
 * Returns true if the given type is a GraphQL object type AND that object type
 * defines fields; false otherwise.
 *
 * WARNING: this function may throw if there's issues with the type's fields,
 * since it calls Type.getFields()
 */
export declare function isValidObjectType(Type: GraphQLNamedType | null | undefined): Type is GraphQLObjectType;
/**
 * A GraphQL scalar spec for a scalar that'll be treated as a verbatim string
 * in and out (i.e. the type name is really just a hint to the user); purely a
 * convenience.
 */
export declare const stringScalarSpec: Readonly<Omit<GraphQLScalarTypeConfig<unknown, unknown>, "name" | "description">>;
/**
 * Only use this on descriptions that are plain text, or that we create
 * manually in code; since descriptions are markdown, it's not safe to use on
 * descriptions that contain code blocks or long inline code strings.
 */
export declare const wrapDescription: (description: string, position: "root" | "type" | "field" | "arg") => string;
/**
 * Generates the spec for a GraphQLScalar (except the name) with the
 * given description/coercion.
 */
export declare const stringTypeSpec: (description: string, coerce?: ((input: string) => string) | undefined) => Omit<GraphQLScalarTypeConfig<any, any>, "name">;
//# sourceMappingURL=utils.d.ts.map