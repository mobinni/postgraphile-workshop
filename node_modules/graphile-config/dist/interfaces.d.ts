declare global {
    namespace GraphileConfig {
        interface Plugin {
            name: string;
            version: string;
            experimental?: boolean;
            description?: string;
            provides?: string[];
            after?: string[];
            before?: string[];
        }
        /**
         * A Graphile Config Preset that can be combined with other presets to
         * ultimately build a resolved preset: a combination of plugins and
         * configuration options to be used by the various Graphile tools.
         */
        interface Preset {
            extends?: ReadonlyArray<Preset>;
            plugins?: Plugin[];
            disablePlugins?: ReadonlyArray<string>;
        }
        interface ResolvedPreset extends Preset {
            extends?: ReadonlyArray<never>;
            plugins?: Plugin[];
            disablePlugins?: ReadonlyArray<string>;
        }
    }
}
export type PluginHookObject<T extends (...args: any[]) => any> = {
    provides?: string[];
    before?: string[];
    after?: string[];
    callback: T;
};
export type PluginHook<T extends (...args: any[]) => any> = T | PluginHookObject<T>;
export type PluginHookCallback<T extends PluginHook<(...args: any[]) => any>> = T extends PluginHook<infer U> ? U : never;
//# sourceMappingURL=interfaces.d.ts.map