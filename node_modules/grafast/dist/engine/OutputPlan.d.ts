import LRU from "@graphile/lru";
import type { FieldNode, GraphQLEnumType, GraphQLObjectType, GraphQLScalarType } from "graphql";
import * as graphql from "graphql";
import type { Bucket } from "../bucket.js";
import type { JSONValue, LocationDetails } from "../interfaces.js";
import type { ExecutableStep } from "../step.js";
import type { PayloadRoot } from "./executeOutputPlan.js";
import type { LayerPlan } from "./LayerPlan.js";
export type OutputPlanTypeIntrospection = {
    mode: "introspection";
    field: FieldNode;
    variableNames: string[];
    introspectionCacheByVariableValues: LRU<string, JSONValue>;
};
export type OutputPlanTypeRoot = {
    mode: "root";
    typeName: string;
};
export type OutputPlanTypeObject = {
    mode: "object";
    typeName: string;
    deferLabel: string | undefined;
};
export type OutputPlanTypePolymorphicObject = {
    mode: "polymorphic";
    typeNames: string[];
    deferLabel: string | undefined;
};
export type OutputPlanTypeArray = {
    mode: "array";
};
export type OutputPlanTypeLeaf = {
    mode: "leaf";
    graphqlType: GraphQLScalarType | GraphQLEnumType;
};
export type OutputPlanTypeNull = {
    mode: "null";
};
export type OutputPlanType = OutputPlanTypeRoot | OutputPlanTypeObject | OutputPlanTypePolymorphicObject | OutputPlanTypeLeaf | OutputPlanTypeNull | OutputPlanTypeArray | OutputPlanTypeIntrospection;
export type OutputPlanKeyValueOutputPlan = {
    type: "outputPlan";
    outputPlan: OutputPlan;
    isNonNull: boolean;
    locationDetails: LocationDetails;
};
export type OutputPlanKeyValueTypeName = {
    type: "__typename";
    locationDetails: LocationDetails;
};
export type OutputPlanKeyValue = OutputPlanKeyValueOutputPlan | OutputPlanKeyValueTypeName;
export type OutputPlanKeyValueOutputPlanWithCachedBits = OutputPlanKeyValueOutputPlan & {
    layerPlanId: number;
};
export declare class OutputPlan<TType extends OutputPlanType = OutputPlanType> {
    layerPlan: LayerPlan;
    readonly type: TType;
    readonly locationDetails: LocationDetails;
    readonly rootStep: ExecutableStep;
    private processRoot;
    keys: {
        [key: string]: OutputPlanKeyValueTypeName | OutputPlanKeyValueOutputPlanWithCachedBits;
    };
    child: OutputPlan | null;
    childIsNonNull: boolean;
    childByTypeName: {
        [typeName: string]: OutputPlan<OutputPlanTypeObject>;
    } | undefined;
    deferredOutputPlans: OutputPlan<OutputPlanTypeObject | OutputPlanTypePolymorphicObject>[];
    constructor(layerPlan: LayerPlan, rootStep: ExecutableStep, type: TType, locationDetails: LocationDetails);
    print(): string;
    toString(): string;
    addChild(type: GraphQLObjectType | null, key: string | null, child: OutputPlanKeyValue): void;
    getLayerPlans(layerPlans?: Set<LayerPlan<import("./LayerPlan.js").LayerPlanReason>>): Set<LayerPlan>;
    makeNextStepByLayerPlan(): Record<number, any[]>;
    execute(this: OutputPlan, _root: PayloadRoot, _mutablePath: Array<string | number>, _bucket: Bucket, _bucketIndex: number): JSONValue;
    executeString(this: OutputPlan, _root: PayloadRoot, _mutablePath: Array<string | number>, _bucket: Bucket, _bucketIndex: number): string;
    optimize(): void;
    finalize(): void;
}
export declare function coerceError(error: Error, locationDetails: LocationDetails, path: ReadonlyArray<string | number>): graphql.GraphQLError;
export declare function nonNullError(locationDetails: LocationDetails, path: readonly (string | number)[]): graphql.GraphQLError;
export declare function getChildBucketAndIndex(childOutputPlan: OutputPlan, outputPlan: OutputPlan | null, bucket: Bucket, bucketIndex: number, arrayIndex?: number | null): [Bucket, number] | null;
//# sourceMappingURL=OutputPlan.d.ts.map