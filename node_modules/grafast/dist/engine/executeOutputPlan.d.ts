import type { GraphQLError } from "graphql";
import type { Bucket, RequestTools } from "../bucket.js";
import type { JSONValue } from "../interfaces.js";
import type { OutputPlan } from "./OutputPlan.js";
export type OutputPath = Array<string | number>;
export interface OutputStream {
    asyncIterable: AsyncIterableIterator<any>;
}
export interface PayloadRoot {
    insideGraphQL: false;
    errors: GraphQLError[];
    queue: Array<SubsequentPayloadSpec>;
    streams: Array<SubsequentStreamSpec>;
    variables: {
        [key: string]: any;
    };
}
export interface OutputPlanContext {
    requestContext: RequestTools;
    root: PayloadRoot;
    path: ReadonlyArray<string | number>;
}
export interface SubsequentPayloadSpec {
    root: PayloadRoot;
    path: ReadonlyArray<string | number>;
    bucket: Bucket;
    bucketIndex: number;
    outputPlan: OutputPlan;
    label: string | undefined;
}
export interface SubsequentStreamSpec {
    root: PayloadRoot;
    path: ReadonlyArray<string | number>;
    bucket: Bucket;
    bucketIndex: number;
    outputPlan: OutputPlan;
    label: string | undefined;
    stream: AsyncIterableIterator<any>;
    startIndex: number;
}
export declare function executeOutputPlan(ctx: OutputPlanContext, outputPlan: OutputPlan, bucket: Bucket, bucketIndex: number, outputDataAsString: boolean): JSONValue;
//# sourceMappingURL=executeOutputPlan.d.ts.map