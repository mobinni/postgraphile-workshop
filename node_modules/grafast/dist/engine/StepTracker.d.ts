import type { OperationPlan } from "../index.js";
import type { ExecutableStep } from "../step";
import type { LayerPlan, LayerPlanReasonsWithParentStep } from "./LayerPlan";
import type { OutputPlan } from "./OutputPlan";
export declare class StepTracker {
    private readonly operationPlan;
    stepCount: number;
    activeSteps: Set<ExecutableStep<any>>;
    stepById: {
        [stepId: number]: ExecutableStep | null;
    };
    private aliasesById;
    stepsWithNoDependencies: Set<ExecutableStep<any>>;
    outputPlansByRootStep: Map<ExecutableStep<any>, Set<OutputPlan<import("./OutputPlan").OutputPlanType>>>;
    layerPlansByRootStep: Map<ExecutableStep<any>, Set<LayerPlan<import("./LayerPlan").LayerPlanReason>>>;
    layerPlansByParentStep: Map<ExecutableStep<any>, Set<LayerPlan<LayerPlanReasonsWithParentStep>>>;
    layerPlans: Array<LayerPlan | null>;
    allOutputPlans: OutputPlan[];
    nextStepIdToDeduplicate: number;
    constructor(operationPlan: OperationPlan);
    newStepsSince(oldStepCount: number): ExecutableStep<any>[];
    finalize(): void;
    addStep($step: ExecutableStep): number;
    addLayerPlan(layerPlan: LayerPlan): number;
    addOutputPlan(outputPlan: OutputPlan): void;
    deleteLayerPlan(layerPlan: LayerPlan): void;
    getStepById(id: number): ExecutableStep;
    getStepById(id: number, allowUnset: true): ExecutableStep | null;
    addStepDependency($dependent: ExecutableStep, $dependency: ExecutableStep): number;
    setOutputPlanRootStep(outputPlan: OutputPlan, $dependency: ExecutableStep): void;
    setLayerPlanRootStep(layerPlan: LayerPlan, $dependency: ExecutableStep): void;
    replaceStep($original: ExecutableStep, $replacement: ExecutableStep): void;
    treeShakeSteps(): void;
    private isNotNeeded;
    purgeBackTo(count: number): void;
    private eradicate;
    moveStepToLayerPlan(step: ExecutableStep, targetLayerPlan: LayerPlan): void;
    addStepToItsLayerPlan(step: ExecutableStep): void;
    removeStepFromItsLayerPlan(step: ExecutableStep): void;
}
//# sourceMappingURL=StepTracker.d.ts.map