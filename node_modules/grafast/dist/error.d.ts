/// <reference types="node" />
import type { $$extensions } from "./interfaces.js";
import { $$safeError } from "./interfaces.js";
export interface GrafastError extends Error {
    originalError: Error;
    [$$extensions]?: Record<string, any>;
}
export declare const $$error: unique symbol;
export declare const _GrafastError: {
    new (originalError: Error, planId: number | null): {
        readonly originalError: Error;
        extensions: Record<string, any>;
        [$$error]: boolean;
        name: string;
        message: string;
        stack?: string | undefined;
        cause?: unknown;
    };
    captureStackTrace(targetObject: object, constructorOpt?: Function | undefined): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
export declare function newGrafastError(error: Error, planId: number | null): {
    readonly originalError: Error;
    extensions: Record<string, any>;
    [$$error]: boolean;
    name: string;
    message: string;
    stack?: string | undefined;
    cause?: unknown;
};
export declare function isGrafastError(value: any): value is GrafastError;
export declare class SafeError<TExtensions extends Record<string, any> | undefined = Record<string, any> | undefined> extends Error {
    extensions: TExtensions;
    [$$safeError]: boolean;
    constructor(message: string, extensions?: TExtensions, errorOptions?: ErrorOptions);
}
export declare function isSafeError(error: Error): error is SafeError;
//# sourceMappingURL=error.d.ts.map