const { Buffer } = require('node:buffer');
const { scryptSync, createDecipheriv } = require('node:crypto');
const pkgName = "grafast";
const pkgVersion = "0.0.1-alpha.9";

const RESET = '\x1b[0m';
const BOLD_BLACK_ON_RED = '\x1b[40;31;1;7m';
const RED = '\x1b[31m';
const BOLD = '\x1b[1m';
const BOLD_BLUE = '\x1b[34;1m';
const BOLD_BLUE_UNDERLINED = '\x1b[34;1;4m';

const iSponsorGraphile = `${RESET}${BOLD_BLUE}I_SPONSOR_GRAPHILE${RESET}${RED}`;
const website = `${RESET}${BOLD_BLUE_UNDERLINED}https://grafast.org${RESET}`;
const errorPrefix = `${BOLD_BLACK_ON_RED}[  ERROR  ]${RESET} ${RED}`;
const errorSuffix = `${RESET}
${BOLD_BLACK_ON_RED}[ CONTEXT ]${RESET} ${RED}You are attempting to run pre-release software that is only available to Graphile sponsors.${RESET}

Please refer to the ${website} documentation for the right code to use with this version '${BOLD}${pkgName}@${pkgVersion}${RESET}'.${RESET}
`;

const password = process.env.I_SPONSOR_GRAPHILE;
if (typeof password !== 'string') {
  console.error(
    `${errorPrefix}You must set the ${iSponsorGraphile} environmental variable to the shared secret to use this pre-release software.${errorSuffix}`,
  );
  process.exit(42);
}

const algorithm = "aes-192-cbc";
const salt = "We wouldn't be able to do so much OSS without sponsorship. 8585103646644423";
const key = scryptSync(password, salt, 24);
const ivBuffer = Buffer.from("iqQBrlQhhzLygmT7ks2rJQ==", "base64");
const iv = new Uint8Array(ivBuffer.buffer, ivBuffer.byteOffset, ivBuffer.length);
const decipher = createDecipheriv(algorithm, key, iv);
const encrypted = "AmT/IOgDt1FGoVOYzAKMlZupq/MPvSJrqBAW/mdLvRna1yQ6KzmfFYwF9hObAuhFTPr5QH8bQEvB1MLD7WBfCLpYAR6Txzi5DIuIAnHNMpFIR6Umv7heJsn4w/UmO38gKoXsDvJgAhBARl1DiKDa8lPOQntQVZbFSGKjIZ9gzhnbx8ACpFGKci/1kgmNxuko76gTdEWrvLV5Bdhbbx8JG5qpwluJC1ya4AExLxwThsgLUaAu5s91hjLiW74Wd+0qxoL1EvO5kHrGZyCtbut0CWtzSm9X+tOjM5qLG2xXTgzEzX8JEspbr82i6jorHy9S7yRtd3jfKx/2OnKxDAZ1RLu1EP459599sLSzZZJt0wcgrVxokMHRdwtXtbPVAWIoehfjI12djGxkTKgPn6n1JlGD5CRLvuush6maBuKZkibiZvgvVyvcVcNAAXxGc2T2owlKf/QPWa4MI+/KH7OWT/qEeMLdgjwCoQVEFeXMxIhjEWeJU1omvZbrgUkWrq2oG3VsPcSm+wjjdxxekHNYy3UP6m+iM012jtUkZBWv1aqEWSroklOyiXMwWl8YSrt9Q35ZUlvh7pv3g4Xyqf6MBj5+RnHfIv/mDIhmwpe3zDSQVqB3okVdtCWNhTeQX/dU40NoYMDkNahRxF23IcCkYUdHbKDjiqKFymsr7E5+PX97ffpehPW2lgjR6CQcjZfQyfy0tHI4FkU3SjHwMYKPq1RRQ6w69sCyrhZHph84fKY+CuXTd36JzuN8wRYe5sGUk6r7rZ2Cs8q3gDJp5sw9mudU1WyADzjcXYzwXW78+XJbvTl5W8pHicg7RBWPBRlU39qb2VMDPlhTVVynPToK/sM2uI1YmVyKykZkIlnULf3577ejJ38U2L0JqPOtC9RHV59uyUG6FubdGxpZkbkVD84kWFt06ClChbYsxJo9PQ3VhRoA3/gBdV02PY7kExFcHK8hrvVcP4bF2Au/AllBZqMamQuU2aK2zMcAucbRphNp8FyKXxJxIxTKTaACMAMsGA8h4tZyuhnBovYDFaHyOJWh/dLwJLWMY/sPAssAeWQrNK6Hy9oIZkX3sq2q2+OaF/1YcMVaG44JacyINuqU1bi+AgYCg0sY73nRMjBO3sXP3DO/BPtkLAMGD4SjqwfWgF02uWd/EVIhQ+QVKGtrTAzPCJBVkPZYLXpZiEnHdedJ4Cc0a85nSZBQ3gMf4fHiTes7AHLKW1jnmRN4+JQDFgJoMTE5+b7aO9xyqKYWFXDH9M4FbuS/ty/doZx2ejvU6LjXgLQ+ubzIxB/nJzhg7dQ3NbuJ0eTghimMtuzrbg8nraTZXRwTgR5sglbcu/ZoxKDWdMV2Nms8X2c80RYOpbGtKz4rWmLJng3TJyb6jHXXAjcQ/fEMEsaBbO2X0a+6Q3lKTOG5xZkrwvEWOXH75zZ7qfxQZ78Jaq4V50PH2n6M1gIWI6ULCrDW2jvxePC1Ei4zLHeys/6IDYvBbIh5GzHf1aCVQswvPI754E/6QPAb1FVofpkSET/vGb6B1jTzbTeOuFm7Luiw+QIvkaBi3PPhBOEMFmje5BUpb5kUfdF1xeQraAY5PWbuUBDTMtij2D1zeDYVRPGVIlEXlPw8xXUxzYhtFGpCxTFdwes+oj9WbLQowr+mfZoh9kbyVAVrzVfiUcfA71alYRbgz6CQeK8JNzepN4U4ntdJQGphpiDViZnPHkAfEp/PCWekxRt09VqsafxyskQlvqPgVcGNG/EvtJmZ+lZCa9+jgPdT9KqFaeVXBfH9TtuxUoKskIjf/qLckjLodsij6gowMm45laF4BZxuK1FJozOHaJmmeeA="
let decrypted;
try {
  decrypted = decipher.update(encrypted, 'base64', 'utf8') + decipher.final('utf8');
} catch (e) {
  console.error(
    `${errorPrefix}The value for the ${iSponsorGraphile} environmental variable (value: '${password.slice(
      0,
      2,
    )}...${password.slice(-2)}') is incorrect.${errorSuffix}`,
  );
  process.exit(42);
}

// Convince Node to allow ESM named imports


// Load our decrypted module
eval(decrypted);
