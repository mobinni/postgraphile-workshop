import type { AsyncHooks, PluginHook } from "graphile-config";
export declare const NULL_PRESET: GraphileConfig.ResolvedPreset;
type GraphileConfigModule = typeof import("graphile-config");
type PromiseOrValue<T> = T | Promise<T>;
export declare function withGraphileConfig<T>(callback: (graphileConfig: GraphileConfigModule | null) => PromiseOrValue<T>): PromiseOrValue<T>;
declare const $$skipHooks: unique symbol;
declare const $$hooksForPreset: unique symbol;
declare global {
    namespace GraphileConfig {
        interface ResolvedPreset {
            [$$hooksForPreset]?: null | AsyncHooks<GraphileConfig.GrafastHooks>;
            [$$skipHooks]?: Record<string, boolean>;
        }
    }
}
export declare function withHooks<TResult>(resolvedPreset: GraphileConfig.ResolvedPreset, callback: (hooks: AsyncHooks<GraphileConfig.GrafastHooks> | null) => PromiseOrValue<TResult>): PromiseOrValue<TResult>;
export declare function hook<THookName extends keyof GraphileConfig.GrafastHooks>(resolvedPreset: GraphileConfig.ResolvedPreset, hookName: THookName, ...args: Parameters<GraphileConfig.GrafastHooks[THookName] extends PluginHook<infer U> ? U : never>): PromiseOrValue<void>;
export {};
//# sourceMappingURL=config.d.ts.map