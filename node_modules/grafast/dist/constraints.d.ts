interface ValueConstraint {
    type: "value";
    path: (string | number)[];
    value: unknown;
}
interface EqualityConstraint {
    type: "equal";
    path: (string | number)[];
    expectedValue: unknown;
    pass: boolean;
}
interface ExistsConstraint {
    type: "exists";
    path: (string | number)[];
    exists: boolean;
}
interface LengthConstraint {
    type: "length";
    path: (string | number)[];
    expectedLength: number | null;
}
interface IsEmptyConstraint {
    type: "isEmpty";
    path: (string | number)[];
    isEmpty: boolean;
}
export type Constraint = ValueConstraint | EqualityConstraint | ExistsConstraint | LengthConstraint | IsEmptyConstraint;
export declare function matchesConstraints(constraints: Constraint[], object: unknown): boolean;
export {};
//# sourceMappingURL=constraints.d.ts.map