import LRU from "@graphile/lru";
import type { FragmentDefinitionNode, GraphQLSchema, OperationDefinitionNode } from "graphql";
import { OperationPlan, SafeError } from "./index.js";
import type { BaseGraphQLRootValue, BaseGraphQLVariables } from "./interfaces.js";
import { $$timeout, $$ts } from "./interfaces.js";
type Fragments = {
    [key: string]: FragmentDefinitionNode;
};
type OperationPlanOrError = OperationPlan | Error | SafeError<{
    [$$timeout]: number;
    [$$ts]: number;
} | {
    [$$timeout]?: undefined;
    [$$ts]?: undefined;
} | undefined>;
interface LinkedList<T> {
    value: T;
    next: LinkedList<T> | null;
}
interface Cache {
    possibleOperationPlans: LinkedList<OperationPlanOrError> | null;
    fragments: Fragments;
}
type CacheByOperation = LRU<OperationDefinitionNode, Cache>;
declare const $$cacheByOperation: unique symbol;
declare module "graphql" {
    interface GraphQLSchema {
        [$$cacheByOperation]?: CacheByOperation;
    }
}
export declare function establishOperationPlan<TVariables extends BaseGraphQLVariables = BaseGraphQLVariables, TContext extends Grafast.Context = Grafast.Context, TRootValue extends BaseGraphQLRootValue = BaseGraphQLRootValue>(schema: GraphQLSchema, operation: OperationDefinitionNode, fragments: Fragments, variableValues: TVariables, context: TContext, rootValue: TRootValue, planningTimeout?: number | null): OperationPlan;
export {};
//# sourceMappingURL=establishOperationPlan.d.ts.map