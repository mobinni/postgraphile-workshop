import type { GraphQLFieldResolver, GraphQLScalarLiteralParser, GraphQLScalarSerializer, GraphQLScalarValueParser, GraphQLSchema } from "graphql";
import type { EnumValueApplyPlanResolver, FieldPlanResolver, GrafastArgumentExtensions, GrafastInputFieldExtensions, ScalarPlanResolver } from "./interfaces.js";
import type { ExecutableStep } from "./step.js";
export type FieldPlans = FieldPlanResolver<any, any, any> | {
    plan?: FieldPlanResolver<any, any, any>;
    subscribePlan?: FieldPlanResolver<any, any, any>;
    resolve?: GraphQLFieldResolver<any, any>;
    subscribe?: GraphQLFieldResolver<any, any>;
    args?: {
        [argName: string]: GrafastArgumentExtensions;
    };
};
export type ObjectPlans = {
    __Step?: {
        new (...args: any[]): ExecutableStep;
    };
} & {
    [fieldName: string]: FieldPlans;
};
export type InputObjectPlans = {
    [fieldName: string]: GrafastInputFieldExtensions;
};
export type InterfaceOrUnionPlans = {
    __resolveType?: (o: unknown) => string;
};
export type ScalarPlans = {
    serialize?: GraphQLScalarSerializer<any>;
    parseValue?: GraphQLScalarValueParser<any>;
    parseLiteral?: GraphQLScalarLiteralParser<any>;
    plan?: ScalarPlanResolver<any, any>;
};
export type EnumPlans = {
    [enumValueName: string]: EnumValueApplyPlanResolver | string | number | boolean | {
        value?: unknown;
        applyPlan?: EnumValueApplyPlanResolver;
    };
};
export interface GrafastPlans {
    [typeName: string]: ObjectPlans | InputObjectPlans | InterfaceOrUnionPlans | ScalarPlans | EnumPlans;
}
export declare function makeGrafastSchema(details: {
    typeDefs: string;
    plans: GrafastPlans;
    enableDeferStream?: boolean;
}): GraphQLSchema;
//# sourceMappingURL=makeGrafastSchema.d.ts.map