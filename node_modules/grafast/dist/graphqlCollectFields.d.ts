import type { DirectiveNode, FieldNode, SelectionNode } from "graphql";
import * as graphql from "graphql";
import type { OperationPlan } from "./engine/OperationPlan.js";
import type { __TrackedValueStep } from "./steps/index.js";
export declare function evalDirectiveArg<T = unknown>(selection: SelectionNode, directiveName: string, argumentName: string, variableValuesStep: __TrackedValueStep, defaultValue: T): T | undefined;
export declare function evalDirectiveArgDirect<T = unknown>(directive: DirectiveNode, argumentName: string, variableValuesStep: __TrackedValueStep, defaultValue: T): T | undefined;
export interface SelectionSetDigest {
    label: string | undefined;
    fields: Map<string, FieldNode[]>;
    deferred: SelectionSetDigest[] | undefined;
}
export declare function graphqlCollectFields(operationPlan: OperationPlan, parentStepId: number, objectType: graphql.GraphQLObjectType, selections: readonly SelectionNode[], isMutation?: boolean, visitedFragments?: {
    [fragmentName: string]: true;
}, selectionSetDigest?: SelectionSetDigest): SelectionSetDigest;
//# sourceMappingURL=graphqlCollectFields.d.ts.map