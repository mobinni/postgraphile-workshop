import type { GraphQLObjectType } from "graphql";
import type { ExecutionExtra, NodeIdCodec, NodeIdHandler, PolymorphicData } from "../interfaces.js";
import type { ExecutableStep, PolymorphicStep } from "../step.js";
import { UnbatchedExecutableStep } from "../step.js";
export declare class NodeStep<TCodecs extends {
    [key: string]: NodeIdCodec<any>;
}> extends UnbatchedExecutableStep implements PolymorphicStep {
    private possibleTypes;
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    allowMultipleOptimizations: boolean;
    private specPlanDep;
    constructor(codecs: TCodecs, possibleTypes: {
        [typeName: string]: NodeIdHandler<TCodecs>;
    }, $id: ExecutableStep<string>);
    planForType(type: GraphQLObjectType): ExecutableStep;
    private getTypeNameFromSpecifier;
    unbatchedExecute: (_extra: ExecutionExtra, specifier: any) => PolymorphicData<string, ReadonlyArray<any>> | null;
}
export declare function node<TCodecs extends {
    [key: string]: NodeIdCodec<any>;
}>(codecs: TCodecs, possibleTypes: {
    [typeName: string]: NodeIdHandler<TCodecs>;
}, $id: ExecutableStep<string>): NodeStep<TCodecs>;
export declare function specFromNodeId(codec: NodeIdCodec<any>, handler: NodeIdHandler<any>, $id: ExecutableStep<string>): any;
//# sourceMappingURL=node.d.ts.map