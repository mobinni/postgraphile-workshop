import type { GrafastResultStreamList, GrafastSubscriber, GrafastValuesList } from "../interfaces.js";
import type { StreamableStep } from "../step.js";
import { ExecutableStep } from "../step.js";
import type { __ItemStep } from "./__item.js";
export declare class ListenStep<TTopics extends {
    [topic: string]: any;
}, TTopic extends keyof TTopics, TPayloadStep extends ExecutableStep> extends ExecutableStep<TTopics[TTopic]> implements StreamableStep<TTopics[TTopic]> {
    itemPlan: (itemPlan: __ItemStep<TTopics[TTopic]>) => TPayloadStep;
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    private pubsubDep;
    private topicDep;
    constructor(pubsubOrPlan: ExecutableStep<GrafastSubscriber<TTopics> | null> | GrafastSubscriber<TTopics> | null, topicOrPlan: ExecutableStep<TTopic> | string, itemPlan?: (itemPlan: __ItemStep<TTopics[TTopic]>) => TPayloadStep);
    execute(): never;
    stream(count: number, values: readonly [
        GrafastValuesList<GrafastSubscriber<TTopics>>,
        GrafastValuesList<TTopic>
    ]): GrafastResultStreamList<TTopics[TTopic]>;
}
export declare function listen<TTopics extends {
    [topic: string]: any;
}, TTopic extends keyof TTopics, TPayloadStep extends ExecutableStep>(pubsubOrPlan: ExecutableStep<GrafastSubscriber<TTopics> | null> | GrafastSubscriber<TTopics> | null, topicOrPlan: ExecutableStep<TTopic> | string, itemPlan?: (itemPlan: __ItemStep<TTopics[TTopic]>) => TPayloadStep): ListenStep<TTopics, TTopic, TPayloadStep>;
//# sourceMappingURL=listen.d.ts.map