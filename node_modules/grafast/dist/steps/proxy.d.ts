import type { GrafastResultsList, GrafastValuesList } from "../index.js";
import type { ExecutionExtra } from "../interfaces.js";
import { $$proxy } from "../interfaces.js";
import type { ExecutableStep } from "../step.js";
import { UnbatchedExecutableStep } from "../step.js";
export declare class ProxyStep<T> extends UnbatchedExecutableStep<T> {
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    private $depId;
    constructor($dep: ExecutableStep<T>, $actualDep: ExecutableStep);
    toStringMeta(): string | null;
    addDependency(step: ExecutableStep): number;
    execute(_count: number, values: [GrafastValuesList<T>]): GrafastResultsList<T>;
    unbatchedExecute(_extra: ExecutionExtra, value: T): T;
    stream: undefined;
}
declare module "../step.js" {
    interface ExecutableStep {
        [$$proxy]?: any;
    }
}
export declare function proxy<TData, TStep extends ExecutableStep<TData>>($step: TStep, $actualDep?: ExecutableStep): TStep & {
    addDependency(step: ExecutableStep): number;
};
//# sourceMappingURL=proxy.d.ts.map