import type { LayerPlanReasonSubroutine } from "../engine/LayerPlan.js";
import { LayerPlan } from "../engine/LayerPlan.js";
import type { GrafastError } from "../error.js";
import type { ConnectionCapableStep } from "../index.js";
import type { ExecutionExtra, GrafastResultsList, GrafastValuesList } from "../interfaces.js";
import type { ListCapableStep } from "../step.js";
import { $$deepDepSkip, ExecutableStep } from "../step.js";
import { __ItemStep } from "./__item.js";
export type ListTransformReduce<TMemo, TItemPlanData> = (memo: TMemo, entireItemValue: unknown, itemPlanData: TItemPlanData) => TMemo;
export type ListTransformItemPlanCallback<TListStep extends ExecutableStep<readonly any[]>, TDepsStep extends ExecutableStep> = (listItemPlan: TListStep extends ListCapableStep<any, any> ? ReturnType<TListStep["listItem"]> : __ItemStep<any>) => TDepsStep;
export interface ListTransformOptions<TListStep extends ExecutableStep<readonly any[]>, TDepsStep extends ExecutableStep, TMemo, TItemStep extends ExecutableStep | undefined = undefined> {
    listStep: TListStep;
    itemPlanCallback: ListTransformItemPlanCallback<TListStep, TDepsStep>;
    initialState(): TMemo;
    reduceCallback: ListTransformReduce<TMemo, TDepsStep extends ExecutableStep<infer U> ? U : never>;
    listItem?(itemPlan: ExecutableStep): TItemStep;
    finalizeCallback?(data: TMemo): TMemo;
    meta?: string;
    optimize?: (this: __ListTransformStep<TListStep, TDepsStep, TMemo, TItemStep>) => ExecutableStep;
    connectionClone?: ConnectionCapableStep<TListStep, any>["connectionClone"];
}
export declare class __ListTransformStep<TListStep extends ExecutableStep<readonly any[]> = ExecutableStep<readonly any[]>, TDepsStep extends ExecutableStep = ExecutableStep, TMemo = any, TItemStep extends ExecutableStep | undefined = ExecutableStep | undefined> extends ExecutableStep<TMemo> {
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    private listStepDepId;
    itemPlanCallback: ListTransformItemPlanCallback<TListStep, TDepsStep>;
    initialState: () => TMemo;
    reduceCallback: ListTransformReduce<TMemo, TDepsStep extends ExecutableStep<infer U> ? U : never>;
    finalizeCallback?: (data: TMemo) => TMemo;
    listItem?: (itemPlan: __ItemStep<this>) => TItemStep;
    private meta;
    connectionClone?: ConnectionCapableStep<TListStep, any>["connectionClone"];
    itemStepId: number;
    subroutineLayer: LayerPlan<LayerPlanReasonSubroutine>;
    constructor(options: ListTransformOptions<TListStep, TDepsStep, TMemo, TItemStep>);
    toStringMeta(): string | null;
    getListStep(): TListStep;
    [$$deepDepSkip](): TListStep;
    dangerouslyGetListPlan(): TListStep;
    deduplicate(peers: __ListTransformStep<any, any, any, any>[]): __ListTransformStep<TListStep, TDepsStep, TMemo, TItemStep>[];
    optimize(): ExecutableStep;
    execute(_count: number, values: [GrafastValuesList<any[] | null | undefined | GrafastError>], extra: ExecutionExtra): Promise<GrafastResultsList<TMemo>>;
}
export declare function listTransform<TListStep extends ExecutableStep<readonly any[]>, TDepsStep extends ExecutableStep, TMemo, TItemStep extends ExecutableStep | undefined = undefined>(options: ListTransformOptions<TListStep, TDepsStep, TMemo, TItemStep>): __ListTransformStep<TListStep, TDepsStep, TMemo, TItemStep>;
//# sourceMappingURL=listTransform.d.ts.map