import type { GraphQLFieldResolver, GraphQLNullableType, GraphQLOutputType, GraphQLResolveInfo } from "graphql";
import type { __ItemStep, ObjectStep } from "../index.js";
import type { ExecutionExtra, GrafastResultsList, GrafastResultStreamList, GrafastValuesList } from "../interfaces.js";
import type { PolymorphicStep } from "../step.js";
import { ExecutableStep, UnbatchedExecutableStep } from "../step.js";
type ResolveInfoBase = Omit<GraphQLResolveInfo, "path" | "rootValue" | "variableValues">;
export declare class GraphQLResolverStep extends UnbatchedExecutableStep {
    private resolver;
    private subscriber;
    private resolveInfoBase;
    private returnContextAndResolveInfo;
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    allowMultipleOptimizations: boolean;
    private planDep;
    private argsDep;
    private contextDep;
    private variableValuesDep;
    private rootValueDep;
    private isNotRoot;
    constructor(resolver: (GraphQLFieldResolver<any, any> & {
        displayName?: string;
    }) | null | undefined, subscriber: (GraphQLFieldResolver<any, any> & {
        displayName?: string;
    }) | null | undefined, $plan: ExecutableStep, $args: ObjectStep, resolveInfoBase: ResolveInfoBase, returnContextAndResolveInfo?: boolean);
    toStringMeta(): string | null;
    deduplicate(peers: GraphQLResolverStep[]): GraphQLResolverStep[];
    unbatchedExecute(_extra: ExecutionExtra, source: any, args: any, context: any, variableValues: any, rootValue: any): any;
    unbatchedStream(_extra: ExecutionExtra, source: any, args: any, context: any, variableValues: any, rootValue: any): any;
    stream(count: number, values: ReadonlyArray<GrafastValuesList<any>>, extra: ExecutionExtra): Promise<GrafastResultStreamList<any>>;
}
export declare class GraphQLItemHandler extends ExecutableStep implements PolymorphicStep {
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    private abstractType?;
    private nullableInnerType;
    isSyncAndSafe: boolean;
    constructor($parent: ExecutableStep, nullableType: GraphQLNullableType & GraphQLOutputType);
    planForType(): this;
    listItem($item: __ItemStep<any>): GraphQLItemHandler;
    private figureOutTheTypeOf;
    private actuallyWrapData;
    private polymorphicWrapData;
    wrapListData(data: unknown, context: unknown, resolveInfo: GraphQLResolveInfo): ({
        data: {};
        context: unknown;
        resolveInfo: GraphQLResolveInfo;
    } | null | undefined)[] | null;
    execute(_count: number, values: [GrafastValuesList<any>]): GrafastResultsList<any>;
}
export declare function graphqlItemHandler($item: ExecutableStep, nullableType: GraphQLNullableType & GraphQLOutputType): GraphQLItemHandler;
export declare function graphqlResolver(resolver: GraphQLFieldResolver<any, any> | null | undefined, subscriber: GraphQLFieldResolver<any, any> | null | undefined, $step: ExecutableStep, $args: ObjectStep, resolveInfoBase: ResolveInfoBase): ExecutableStep;
export {};
//# sourceMappingURL=graphqlResolver.d.ts.map