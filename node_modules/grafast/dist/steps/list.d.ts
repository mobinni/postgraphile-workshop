import type { ExecutionExtra, StepOptimizeOptions, UnwrapPlanTuple } from "../interfaces.js";
import type { ExecutableStep } from "../step.js";
import { UnbatchedExecutableStep } from "../step.js";
import { ConstantStep } from "./constant.js";
export declare class ListStep<const TPlanTuple extends readonly ExecutableStep[]> extends UnbatchedExecutableStep<UnwrapPlanTuple<TPlanTuple>> {
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    allowMultipleOptimizations: boolean;
    optimizeMetaKey: string;
    constructor(list: TPlanTuple);
    toStringMeta(): string;
    execute(count: number, values: any[][]): Array<UnwrapPlanTuple<TPlanTuple>>;
    unbatchedExecute(_extra: ExecutionExtra, ...values: any[]): UnwrapPlanTuple<TPlanTuple>;
    deduplicate(peers: ListStep<TPlanTuple>[]): ListStep<TPlanTuple>[];
    optimize(opts: StepOptimizeOptions): this | ConstantStep<any[]>;
    at<TIndex extends keyof TPlanTuple>(index: TIndex): TPlanTuple[TIndex];
}
export declare function list<const TPlanTuple extends readonly ExecutableStep[]>(list: TPlanTuple): ListStep<TPlanTuple>;
//# sourceMappingURL=list.d.ts.map