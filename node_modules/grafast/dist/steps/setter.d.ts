import type { BaseStep, ExecutableStep } from "../step.js";
import { ModifierStep } from "../step.js";
export interface SetterCapableStep<TPlans extends {
    [key: string]: ExecutableStep;
}> extends BaseStep {
    set<TKey extends keyof TPlans>(key: TKey, value: TPlans[TKey]): void;
}
export declare class SetterStep<TPlans extends {
    [key: string]: ExecutableStep;
} = {
    [key: string]: ExecutableStep;
}, TParentStep extends SetterCapableStep<TPlans> = SetterCapableStep<TPlans>> extends ModifierStep<TParentStep> {
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    private setters;
    constructor($parent: TParentStep);
    set<TKey extends keyof TPlans>(key: TKey, valuePlan: TPlans[TKey]): void;
    apply(): void;
}
export declare function setter<TPlans extends {
    [key: string]: ExecutableStep;
} = {
    [key: string]: ExecutableStep;
}, TParentStep extends SetterCapableStep<TPlans> = SetterCapableStep<TPlans>>($parent: TParentStep): SetterStep<TPlans, TParentStep>;
//# sourceMappingURL=setter.d.ts.map