import type { ExecutionExtra } from "../interfaces.js";
import type { ExecutableStep } from "../step.js";
import { UnbatchedExecutableStep } from "../step.js";
export declare class LastStep<TData> extends UnbatchedExecutableStep<TData> {
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    allowMultipleOptimizations: boolean;
    constructor(parentPlan: ExecutableStep<ReadonlyArray<TData>>);
    unbatchedExecute: (_extra: ExecutionExtra, list: ReadonlyArray<TData>) => TData;
    deduplicate(peers: LastStep<TData>[]): LastStep<TData>[];
    optimize(): ExecutableStep<any> | this;
}
export declare function last<TData>(plan: ExecutableStep<ReadonlyArray<TData>>): LastStep<TData>;
//# sourceMappingURL=last.d.ts.map