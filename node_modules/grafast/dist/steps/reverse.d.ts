import type { ExecutionExtra, GrafastResultsList, GrafastValuesList } from "../interfaces.js";
import type { ExecutableStep } from "../step.js";
import { UnbatchedExecutableStep } from "../step.js";
export declare function reverseArray<TData = any>(list: readonly TData[]): TData[];
export declare class ReverseStep<TData> extends UnbatchedExecutableStep<readonly TData[]> {
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    allowMultipleOptimizations: boolean;
    constructor(plan: ExecutableStep<readonly TData[]>);
    execute(_count: number, values: [GrafastValuesList<TData[]>]): GrafastResultsList<TData[]>;
    unbatchedExecute(_extra: ExecutionExtra, arr: TData[]): TData[];
    deduplicate(peers: ReverseStep<TData>[]): ReverseStep<TData>[];
}
export declare function reverse<TData>(plan: ExecutableStep<readonly TData[]>): ReverseStep<TData>;
//# sourceMappingURL=reverse.d.ts.map