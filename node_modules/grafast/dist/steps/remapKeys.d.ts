import type { ExecutionExtra, GrafastResultsList, GrafastValuesList } from "../interfaces.js";
import type { ExecutableStep } from "../step.js";
import { UnbatchedExecutableStep } from "../step.js";
export type ActualKeyByDesiredKey = {
    [desiredKey: string]: string;
};
export declare class RemapKeysStep extends UnbatchedExecutableStep {
    private actualKeyByDesiredKey;
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    allowMultipleOptimizations: boolean;
    private mapper;
    constructor($plan: ExecutableStep, actualKeyByDesiredKey: ActualKeyByDesiredKey);
    toStringMeta(): string;
    optimize(): ExecutableStep<any> | this;
    finalize(): void;
    execute(_count: number, values: GrafastValuesList<any[]>): GrafastResultsList<any>;
    unbatchedExecute(_extra: ExecutionExtra, value: any): any;
    deduplicate(peers: RemapKeysStep[]): RemapKeysStep[];
}
export declare function remapKeys($step: ExecutableStep, actualKeyByDesiredKey: {
    [desiredKey: string]: string;
}): RemapKeysStep;
//# sourceMappingURL=remapKeys.d.ts.map