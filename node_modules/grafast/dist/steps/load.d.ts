import type { __ItemStep } from "../index.js";
import type { ExecutionExtra, GrafastResultsList, GrafastValuesList, PromiseOrDirect } from "../interfaces.js";
import { ExecutableStep } from "../step.js";
export interface LoadOptions<TItem, TParams extends Record<string, any>> {
    attributes: ReadonlyArray<keyof TItem> | null;
    params: Partial<TParams>;
}
type LoadCallback<TSpec, TItem, TData extends TItem | ReadonlyArray<TItem>, TParams extends Record<string, any>> = {
    (specs: ReadonlyArray<TSpec>, options: LoadOptions<TItem, TParams>): PromiseOrDirect<ReadonlyArray<TData>>;
    displayName?: string;
};
export type LoadOneCallback<TSpec, TItem, TParams extends Record<string, any>> = LoadCallback<TSpec, TItem, TItem, TParams>;
export type LoadManyCallback<TSpec, TItem, TParams extends Record<string, any>> = LoadCallback<TSpec, TItem, ReadonlyArray<TItem>, TParams>;
export declare function loadOneCallback<TSpec, TItem, TParams extends Record<string, any>>(callback: LoadOneCallback<TSpec, TItem, TParams>): LoadOneCallback<TSpec, TItem, TParams>;
export declare function loadManyCallback<TSpec, TItem, TParams extends Record<string, any>>(callback: LoadManyCallback<TSpec, TItem, TParams>): LoadManyCallback<TSpec, TItem, TParams>;
export declare class LoadedRecordStep<TItem, TParams extends Record<string, any>> extends ExecutableStep<TItem> {
    private isSingle;
    private sourceDescription;
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    attributes: Set<keyof TItem>;
    params: Partial<TParams>;
    constructor($data: ExecutableStep<TItem>, isSingle: boolean, sourceDescription: string);
    toStringMeta(): string;
    get(attr: keyof TItem & (string | number)): import("./access.js").AccessStep<unknown>;
    setParam<TParamKey extends keyof TParams>(paramKey: TParamKey, value: TParams[TParamKey]): void;
    optimize(): ExecutableStep<any>;
    execute(_count: number, [records]: [GrafastValuesList<TItem>]): GrafastResultsList<TItem>;
}
export declare class LoadStep<TSpec, TItem, TData extends TItem | ReadonlyArray<TItem>, TParams extends Record<string, any>> extends ExecutableStep {
    private load;
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    loadOptions: LoadOptions<TItem, TParams> | null;
    loadOptionsKey: string;
    attributes: Set<keyof TItem>;
    params: Partial<TParams>;
    constructor($spec: ExecutableStep<TSpec>, load: LoadCallback<TSpec, TItem, TData, TParams>);
    toStringMeta(): string;
    listItem($item: __ItemStep<this>): LoadedRecordStep<TItem, TParams>;
    single(): TData extends ReadonlyArray<any> ? never : LoadedRecordStep<TItem, TParams>;
    setParam<TParamKey extends keyof TParams>(paramKey: TParamKey, value: TParams[TParamKey]): void;
    addAttributes(attributes: Set<keyof TItem>): void;
    finalize(): void;
    execute(count: number, [specs]: [GrafastValuesList<TSpec>], extra: ExecutionExtra): PromiseOrDirect<GrafastResultsList<TData>>;
}
export declare function loadMany<TSpec, TItem, TParams extends Record<string, any> = Record<string, any>>($spec: ExecutableStep<TSpec>, loadCallback: LoadManyCallback<TSpec, TItem, TParams>): LoadStep<TSpec, TItem, readonly TItem[], TParams>;
export declare function loadOne<TSpec, TItem, TParams extends Record<string, any> = Record<string, any>>($spec: ExecutableStep<TSpec>, loadCallback: LoadOneCallback<TSpec, TItem, TParams>): TItem extends readonly any[] ? never : LoadedRecordStep<TItem, TParams>;
export {};
//# sourceMappingURL=load.d.ts.map