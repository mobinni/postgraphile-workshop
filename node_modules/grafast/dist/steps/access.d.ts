import type { ExecutionExtra } from "../interfaces.js";
import type { ExecutableStep } from "../step.js";
import { UnbatchedExecutableStep } from "../step.js";
export declare const expressionSymbol: unique symbol;
export declare class AccessStep<TData> extends UnbatchedExecutableStep<TData> {
    readonly fallback?: any;
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    allowMultipleOptimizations: boolean;
    readonly path: (string | number | symbol)[];
    constructor(parentPlan: ExecutableStep<unknown>, path: (string | number | symbol)[], fallback?: any);
    toStringMeta(): string;
    get<TAttr extends keyof TData>(attrName: TAttr): AccessStep<TData[TAttr]>;
    at<TIndex extends keyof TData>(index: TIndex): AccessStep<TData[TIndex]>;
    optimize(): AccessStep<TData>;
    unbatchedExecute(_extra: ExecutionExtra, ..._values: any[]): any;
    deduplicate(peers: AccessStep<unknown>[]): AccessStep<TData>[];
}
export declare function access<TData>(parentPlan: ExecutableStep<unknown>, path: (string | number | symbol)[] | string | number | symbol, fallback?: any): AccessStep<TData>;
//# sourceMappingURL=access.d.ts.map