import type { ExecutionArgs } from "graphql";
import type { AsyncExecutionResult, ExecutionResult } from "graphql/execution/execute";
import type { OperationPlan } from "./index.js";
import type { GrafastTimeouts, PromiseOrDirect } from "./interfaces.js";
declare const $$contextPlanCache: unique symbol;
export interface GrafastPrepareOptions {
    explain?: boolean | string[];
    outputDataAsString?: boolean;
    timeouts?: GrafastTimeouts;
}
export declare function executePreemptive(operationPlan: OperationPlan, variableValues: any, context: any, rootValue: any, outputDataAsString: boolean, executionTimeout: number | null): PromiseOrDirect<ExecutionResult | AsyncGenerator<AsyncExecutionResult, void, void>>;
declare module "./engine/OperationPlan.js" {
    interface OperationPlan {
        [$$contextPlanCache]?: string;
    }
}
export declare function grafastPrepare(args: ExecutionArgs, options?: GrafastPrepareOptions): PromiseOrDirect<ExecutionResult | AsyncGenerator<AsyncExecutionResult, void, void>>;
export {};
//# sourceMappingURL=prepare.d.ts.map