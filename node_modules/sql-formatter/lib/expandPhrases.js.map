{"version":3,"file":"expandPhrases.js","names":["expandPhrases","phrases","flatMap","expandSinglePhrase","phrase","buildCombinations","parsePhrase","map","text","trim","REQUIRED_PART","REQUIRED_BLOCK","OPTIONAL_BLOCK","index","result","length","lastIndex","requiredMatch","exec","push","optionalBlockMatch","choices","slice","split","s","requiredBlockMatch","Error","first","rest","undefined","tail","head"],"sources":["../src/expandPhrases.ts"],"sourcesContent":["/**\n * Performs expandSinglePhrase() on array\n */\nexport const expandPhrases = (phrases: string[]): string[] => phrases.flatMap(expandSinglePhrase);\n\n/**\n * Expands a syntax description like\n *\n *     \"CREATE [OR REPLACE] [TEMP|TEMPORARY] TABLE\"\n *\n * into an array of all possible combinations like:\n *\n *     [ \"CREATE TABLE\",\n *       \"CREATE TEMP TABLE\",\n *       \"CREATE TEMPORARY TABLE\",\n *       \"CREATE OR REPLACE TABLE\",\n *       \"CREATE OR REPLACE TEMP TABLE\",\n *       \"CREATE OR REPLACE TEMPORARY TABLE\" ]\n */\nexport const expandSinglePhrase = (phrase: string): string[] =>\n  buildCombinations(parsePhrase(phrase)).map(text => text.trim());\n\n// This data type holds variants of a single part in whole phrase.\n// Corresponding to syntax as follows:\n//\n//   \"TABLE\"            --> [\"TABLE\"]\n//   \"[TABLE]\"          --> [\"\", \"TABLE\"]\n//   \"[TEMP|TEMPORARY]\" --> [\"\", \"TEMP\", \"TEMPORARY\"]\n//   \"{TEMP|TEMPORARY}\" --> [\"TEMP\", \"TEMPORARY\"]\n//\ntype PhrasePart = string[];\n\nconst REQUIRED_PART = /[^[\\]{}]+/y;\nconst REQUIRED_BLOCK = /\\{.*?\\}/y;\nconst OPTIONAL_BLOCK = /\\[.*?\\]/y;\n\nconst parsePhrase = (text: string): PhrasePart[] => {\n  let index = 0;\n  const result: PhrasePart[] = [];\n  while (index < text.length) {\n    // Match everything else outside of \"[...]\" or \"{...}\" blocks\n    REQUIRED_PART.lastIndex = index;\n    const requiredMatch = REQUIRED_PART.exec(text);\n    if (requiredMatch) {\n      result.push([requiredMatch[0].trim()]);\n      index += requiredMatch[0].length;\n    }\n\n    // Match \"[...]\" block\n    OPTIONAL_BLOCK.lastIndex = index;\n    const optionalBlockMatch = OPTIONAL_BLOCK.exec(text);\n    if (optionalBlockMatch) {\n      const choices = optionalBlockMatch[0]\n        .slice(1, -1)\n        .split('|')\n        .map(s => s.trim());\n      result.push(['', ...choices]);\n      index += optionalBlockMatch[0].length;\n    }\n\n    // Match \"{...}\" block\n    REQUIRED_BLOCK.lastIndex = index;\n    const requiredBlockMatch = REQUIRED_BLOCK.exec(text);\n    if (requiredBlockMatch) {\n      const choices = requiredBlockMatch[0]\n        .slice(1, -1)\n        .split('|')\n        .map(s => s.trim());\n      result.push(choices);\n      index += requiredBlockMatch[0].length;\n    }\n\n    if (!requiredMatch && !optionalBlockMatch && !requiredBlockMatch) {\n      throw new Error(`Unbalanced parenthesis in: ${text}`);\n    }\n  }\n  return result;\n};\n\nconst buildCombinations = ([first, ...rest]: PhrasePart[]): string[] => {\n  if (first === undefined) {\n    return [''];\n  }\n  return buildCombinations(rest).flatMap(tail =>\n    first.map(head => head.trim() + ' ' + tail.trim())\n  );\n};\n"],"mappings":"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"}