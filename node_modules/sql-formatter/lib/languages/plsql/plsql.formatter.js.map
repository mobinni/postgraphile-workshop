{"version":3,"file":"plsql.formatter.js","names":["expandPhrases","EOF_TOKEN","isReserved","isToken","TokenType","keywords","functions","reservedSelect","reservedClauses","onelineClauses","reservedSetOperations","reservedJoins","reservedPhrases","plsql","tokenizerOptions","supportsXor","reservedKeywords","reservedFunctionNames","stringTypes","quote","prefixes","identTypes","identChars","rest","variableTypes","regex","paramTypes","numbered","named","paramChars","operators","postProcess","formatOptions","alwaysDenseOperators","tokens","previousReservedToken","map","token","SET","BY","type","RESERVED_KEYWORD"],"sources":["../../../src/languages/plsql/plsql.formatter.ts"],"sourcesContent":["import { DialectOptions } from '../../dialect.js';\nimport { expandPhrases } from '../../expandPhrases.js';\nimport { EOF_TOKEN, isReserved, isToken, Token, TokenType } from '../../lexer/token.js';\nimport { keywords } from './plsql.keywords.js';\nimport { functions } from './plsql.functions.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT | UNIQUE]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'PARTITION BY',\n  'ORDER [SIBLINGS] BY',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  'FOR UPDATE [OF]',\n  // Data manipulation\n  // - insert:\n  'INSERT [INTO | ALL INTO]',\n  'VALUES',\n  // - update:\n  'SET',\n  // - merge:\n  'MERGE [INTO]',\n  'WHEN [NOT] MATCHED [THEN]',\n  'UPDATE SET',\n  // Data definition\n  'CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW',\n  'CREATE MATERIALIZED VIEW',\n  'CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE',\n  // other\n  'RETURNING',\n]);\n\nconst onelineClauses = expandPhrases([\n  // - update:\n  'UPDATE [ONLY]',\n  // - delete:\n  'DELETE FROM [ONLY]',\n  // - drop table:\n  'DROP TABLE',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD',\n  'DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}',\n  'MODIFY',\n  'RENAME TO',\n  'RENAME COLUMN',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // other\n  'SET SCHEMA',\n  'BEGIN',\n  'CONNECT BY',\n  'DECLARE',\n  'EXCEPT',\n  'EXCEPTION',\n  'LOOP',\n  'START WITH',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT', 'INTERSECT']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n  // non-standard joins\n  '{CROSS | OUTER} APPLY',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON {UPDATE | DELETE} [SET NULL]',\n  'ON COMMIT',\n  '{ROWS | RANGE} BETWEEN',\n]);\n\nexport const plsql: DialectOptions = {\n  tokenizerOptions: {\n    reservedSelect,\n    reservedClauses: [...reservedClauses, ...onelineClauses],\n    reservedSetOperations,\n    reservedJoins,\n    reservedPhrases,\n    supportsXor: true,\n    reservedKeywords: keywords,\n    reservedFunctionNames: functions,\n    stringTypes: [\n      { quote: \"''-qq\", prefixes: ['N'] },\n      { quote: \"q''\", prefixes: ['N'] },\n    ],\n    // PL/SQL doesn't actually support escaping of quotes in identifiers,\n    // but for the sake of simpler testing we'll support this anyway\n    // as all other SQL dialects with \"identifiers\" do.\n    identTypes: [`\"\"-qq`],\n    identChars: { rest: '$#' },\n    variableTypes: [{ regex: '&{1,2}[A-Za-z][A-Za-z0-9_$#]*' }],\n    paramTypes: { numbered: [':'], named: [':'] },\n    paramChars: {}, // Empty object used on purpose to not allow $ and # chars as specified in identChars\n    operators: [\n      '**',\n      ':=',\n      '%',\n      '~=',\n      '^=',\n      // '..', // Conflicts with float followed by dot (so \"2..3\" gets parsed as [\"2.\", \".\", \"3\"])\n      '>>',\n      '<<',\n      '=>',\n      '@',\n      '||',\n    ],\n    postProcess,\n  },\n  formatOptions: {\n    alwaysDenseOperators: ['@'],\n    onelineClauses,\n  },\n};\n\nfunction postProcess(tokens: Token[]) {\n  let previousReservedToken: Token = EOF_TOKEN;\n\n  return tokens.map(token => {\n    // BY [SET]\n    if (isToken.SET(token) && isToken.BY(previousReservedToken)) {\n      return { ...token, type: TokenType.RESERVED_KEYWORD };\n    }\n\n    if (isReserved(token.type)) {\n      previousReservedToken = token;\n    }\n\n    return token;\n  });\n}\n"],"mappings":"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"}