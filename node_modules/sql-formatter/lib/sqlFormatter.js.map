{"version":3,"file":"sqlFormatter.js","names":["allDialects","createDialect","Formatter","ConfigError","validateConfig","dialectNameMap","bigquery","db2","hive","mariadb","mysql","n1ql","plsql","postgresql","redshift","spark","sqlite","sql","trino","transactsql","tsql","singlestoredb","snowflake","supportedDialects","Object","keys","defaultOptions","tabWidth","useTabs","keywordCase","indentStyle","logicalOperatorNewline","tabulateAlias","commaPosition","expressionWidth","linesBetweenQueries","denseOperators","newlineBeforeSemicolon","format","query","cfg","language","includes","canonicalDialectName","formatDialect","dialect","Error","options"],"sources":["../src/sqlFormatter.ts"],"sourcesContent":["import * as allDialects from './allDialects.js';\n\nimport { FormatOptions } from './FormatOptions.js';\nimport { createDialect, DialectOptions } from './dialect.js';\nimport Formatter from './formatter/Formatter.js';\nimport { ConfigError, validateConfig } from './validateConfig.js';\n\nconst dialectNameMap: Record<string, keyof typeof allDialects> = {\n  bigquery: 'bigquery',\n  db2: 'db2',\n  hive: 'hive',\n  mariadb: 'mariadb',\n  mysql: 'mysql',\n  n1ql: 'n1ql',\n  plsql: 'plsql',\n  postgresql: 'postgresql',\n  redshift: 'redshift',\n  spark: 'spark',\n  sqlite: 'sqlite',\n  sql: 'sql',\n  trino: 'trino',\n  transactsql: 'transactsql',\n  tsql: 'transactsql', // alias for transactsq\n  singlestoredb: 'singlestoredb',\n  snowflake: 'snowflake',\n};\n\nexport const supportedDialects = Object.keys(dialectNameMap);\nexport type SqlLanguage = keyof typeof dialectNameMap;\n\nexport type FormatOptionsWithLanguage = Partial<FormatOptions> & {\n  language?: SqlLanguage;\n};\n\nexport type FormatOptionsWithDialect = Partial<FormatOptions> & {\n  dialect: DialectOptions;\n};\n\nconst defaultOptions: FormatOptions = {\n  tabWidth: 2,\n  useTabs: false,\n  keywordCase: 'preserve',\n  indentStyle: 'standard',\n  logicalOperatorNewline: 'before',\n  tabulateAlias: false,\n  commaPosition: 'after',\n  expressionWidth: 50,\n  linesBetweenQueries: 1,\n  denseOperators: false,\n  newlineBeforeSemicolon: false,\n};\n\n/**\n * Format whitespace in a query to make it easier to read.\n *\n * @param {string} query - input SQL query string\n * @param {FormatOptionsWithLanguage} cfg Configuration options (see docs in README)\n * @return {string} formatted query\n */\nexport const format = (query: string, cfg: FormatOptionsWithLanguage = {}): string => {\n  if (typeof cfg.language === 'string' && !supportedDialects.includes(cfg.language)) {\n    throw new ConfigError(`Unsupported SQL dialect: ${cfg.language}`);\n  }\n\n  const canonicalDialectName = dialectNameMap[cfg.language || 'sql'];\n\n  return formatDialect(query, {\n    ...cfg,\n    dialect: allDialects[canonicalDialectName],\n  });\n};\n\n/**\n * Like the above format(), but language parameter is mandatory\n * and must be a Dialect object instead of a string.\n *\n * @param {string} query - input SQL query string\n * @param {FormatOptionsWithDialect} cfg Configuration options (see docs in README)\n * @return {string} formatted query\n */\nexport const formatDialect = (\n  query: string,\n  { dialect, ...cfg }: FormatOptionsWithDialect\n): string => {\n  if (typeof query !== 'string') {\n    throw new Error('Invalid query argument. Expected string, instead got ' + typeof query);\n  }\n\n  const options = validateConfig({\n    ...defaultOptions,\n    ...cfg,\n  });\n\n  return new Formatter(createDialect(dialect), options).format(query);\n};\n\nexport type FormatFn = typeof format;\n"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,kBAA7B;AAGA,SAASC,aAAT,QAA8C,cAA9C;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,qBAA5C;AAEA,MAAMC,cAAwD,GAAG;EAC/DC,QAAQ,EAAE,UADqD;EAE/DC,GAAG,EAAE,KAF0D;EAG/DC,IAAI,EAAE,MAHyD;EAI/DC,OAAO,EAAE,SAJsD;EAK/DC,KAAK,EAAE,OALwD;EAM/DC,IAAI,EAAE,MANyD;EAO/DC,KAAK,EAAE,OAPwD;EAQ/DC,UAAU,EAAE,YARmD;EAS/DC,QAAQ,EAAE,UATqD;EAU/DC,KAAK,EAAE,OAVwD;EAW/DC,MAAM,EAAE,QAXuD;EAY/DC,GAAG,EAAE,KAZ0D;EAa/DC,KAAK,EAAE,OAbwD;EAc/DC,WAAW,EAAE,aAdkD;EAe/DC,IAAI,EAAE,aAfyD;EAe1C;EACrBC,aAAa,EAAE,eAhBgD;EAiB/DC,SAAS,EAAE;AAjBoD,CAAjE;AAoBA,OAAO,MAAMC,iBAAiB,GAAGC,MAAM,CAACC,IAAP,CAAYpB,cAAZ,CAA1B;AAWP,MAAMqB,cAA6B,GAAG;EACpCC,QAAQ,EAAE,CAD0B;EAEpCC,OAAO,EAAE,KAF2B;EAGpCC,WAAW,EAAE,UAHuB;EAIpCC,WAAW,EAAE,UAJuB;EAKpCC,sBAAsB,EAAE,QALY;EAMpCC,aAAa,EAAE,KANqB;EAOpCC,aAAa,EAAE,OAPqB;EAQpCC,eAAe,EAAE,EARmB;EASpCC,mBAAmB,EAAE,CATe;EAUpCC,cAAc,EAAE,KAVoB;EAWpCC,sBAAsB,EAAE;AAXY,CAAtC;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAgBC,GAA8B,GAAG,EAAjD,KAAgE;EACpF,IAAI,OAAOA,GAAG,CAACC,QAAX,KAAwB,QAAxB,IAAoC,CAAClB,iBAAiB,CAACmB,QAAlB,CAA2BF,GAAG,CAACC,QAA/B,CAAzC,EAAmF;IACjF,MAAM,IAAItC,WAAJ,CAAiB,4BAA2BqC,GAAG,CAACC,QAAS,EAAzD,CAAN;EACD;;EAED,MAAME,oBAAoB,GAAGtC,cAAc,CAACmC,GAAG,CAACC,QAAJ,IAAgB,KAAjB,CAA3C;EAEA,OAAOG,aAAa,CAACL,KAAD,EAAQ,EAC1B,GAAGC,GADuB;IAE1BK,OAAO,EAAE7C,WAAW,CAAC2C,oBAAD;EAFM,CAAR,CAApB;AAID,CAXM;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAG,CAC3BL,KAD2B,EAE3B;EAAEM,OAAF;EAAW,GAAGL;AAAd,CAF2B,KAGhB;EACX,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;IAC7B,MAAM,IAAIO,KAAJ,CAAU,0DAA0D,OAAOP,KAA3E,CAAN;EACD;;EAED,MAAMQ,OAAO,GAAG3C,cAAc,CAAC,EAC7B,GAAGsB,cAD0B;IAE7B,GAAGc;EAF0B,CAAD,CAA9B;EAKA,OAAO,IAAItC,SAAJ,CAAcD,aAAa,CAAC4C,OAAD,CAA3B,EAAsCE,OAAtC,EAA+CT,MAA/C,CAAsDC,KAAtD,CAAP;AACD,CAdM"}