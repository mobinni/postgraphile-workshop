{"version":3,"file":"createParser.js","names":["nearley","disambiguateTokens","grammar","LexerAdapter","createEofToken","Parser","NearleyParser","Grammar","createParser","tokenizer","paramTypesOverrides","lexer","chunk","tokenize","length","parser","fromCompiled","parse","sql","paramTypes","results","feed","Error","JSON","stringify","undefined"],"sources":["../../src/parser/createParser.ts"],"sourcesContent":["import nearley from 'nearley';\n\nimport Tokenizer from '../lexer/Tokenizer.js';\nimport { disambiguateTokens } from '../lexer/disambiguateTokens.js';\nimport { ParamTypes } from '../lexer/TokenizerOptions.js';\nimport { StatementNode } from './ast.js';\nimport grammar from './grammar.js';\nimport LexerAdapter from './LexerAdapter.js';\nimport { createEofToken } from '../lexer/token.js';\n\nconst { Parser: NearleyParser, Grammar } = nearley;\n\nexport interface Parser {\n  parse(sql: string, paramTypesOverrides: ParamTypes): StatementNode[];\n}\n\n/**\n * Creates a parser object which wraps the setup of Nearley parser\n */\nexport function createParser(tokenizer: Tokenizer): Parser {\n  let paramTypesOverrides: ParamTypes = {};\n  const lexer = new LexerAdapter(chunk => [\n    ...disambiguateTokens(tokenizer.tokenize(chunk, paramTypesOverrides)),\n    createEofToken(chunk.length),\n  ]);\n  const parser = new NearleyParser(Grammar.fromCompiled(grammar), { lexer });\n\n  return {\n    parse: (sql: string, paramTypes: ParamTypes) => {\n      // share paramTypesOverrides with Tokenizer\n      paramTypesOverrides = paramTypes;\n\n      const { results } = parser.feed(sql);\n\n      if (results.length === 1) {\n        return results[0];\n      } else if (results.length === 0) {\n        // Ideally we would report a line number where the parser failed,\n        // but I haven't found a way to get this info from Nearley :(\n        throw new Error('Parse error: Invalid SQL');\n      } else {\n        throw new Error(`Parse error: Ambiguous grammar\\n${JSON.stringify(results, undefined, 2)}`);\n      }\n    },\n  };\n}\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AAGA,SAASC,kBAAT,QAAmC,gCAAnC;AAGA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,MAAM;EAAEC,MAAM,EAAEC,aAAV;EAAyBC;AAAzB,IAAqCP,OAA3C;;AAMA;AACA;AACA;AACA,OAAO,SAASQ,YAAT,CAAsBC,SAAtB,EAAoD;EACzD,IAAIC,mBAA+B,GAAG,EAAtC;EACA,MAAMC,KAAK,GAAG,IAAIR,YAAJ,CAAiBS,KAAK,IAAI,CACtC,GAAGX,kBAAkB,CAACQ,SAAS,CAACI,QAAV,CAAmBD,KAAnB,EAA0BF,mBAA1B,CAAD,CADiB,EAEtCN,cAAc,CAACQ,KAAK,CAACE,MAAP,CAFwB,CAA1B,CAAd;EAIA,MAAMC,MAAM,GAAG,IAAIT,aAAJ,CAAkBC,OAAO,CAACS,YAAR,CAAqBd,OAArB,CAAlB,EAAiD;IAAES;EAAF,CAAjD,CAAf;EAEA,OAAO;IACLM,KAAK,EAAE,CAACC,GAAD,EAAcC,UAAd,KAAyC;MAC9C;MACAT,mBAAmB,GAAGS,UAAtB;MAEA,MAAM;QAAEC;MAAF,IAAcL,MAAM,CAACM,IAAP,CAAYH,GAAZ,CAApB;;MAEA,IAAIE,OAAO,CAACN,MAAR,KAAmB,CAAvB,EAA0B;QACxB,OAAOM,OAAO,CAAC,CAAD,CAAd;MACD,CAFD,MAEO,IAAIA,OAAO,CAACN,MAAR,KAAmB,CAAvB,EAA0B;QAC/B;QACA;QACA,MAAM,IAAIQ,KAAJ,CAAU,0BAAV,CAAN;MACD,CAJM,MAIA;QACL,MAAM,IAAIA,KAAJ,CAAW,mCAAkCC,IAAI,CAACC,SAAL,CAAeJ,OAAf,EAAwBK,SAAxB,EAAmC,CAAnC,CAAsC,EAAnF,CAAN;MACD;IACF;EAhBI,CAAP;AAkBD"}