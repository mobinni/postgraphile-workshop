{"version":3,"file":"LexerAdapter.js","names":["lineColFromIndex","TokenType","LexerAdapter","index","tokens","input","constructor","tokenize","reset","chunk","_info","next","save","formatError","token","line","col","start","text","has","name"],"sources":["../../src/parser/LexerAdapter.ts"],"sourcesContent":["import { lineColFromIndex } from '../lexer/lineColFromIndex.js';\nimport { Token, TokenType } from '../lexer/token.js';\n\n// Nearly type definitions say that Token must have a value field,\n// which however is wrong.  Instead Nearley expects a text field.\ntype NearleyToken = Token & { value: string };\n\nexport default class LexerAdapter {\n  private index = 0;\n  private tokens: Token[] = [];\n  private input = '';\n\n  constructor(private tokenize: (chunk: string) => Token[]) {}\n\n  reset(chunk: string, _info: any) {\n    this.input = chunk;\n    this.index = 0;\n    this.tokens = this.tokenize(chunk);\n  }\n\n  next(): NearleyToken | undefined {\n    return this.tokens[this.index++] as NearleyToken | undefined;\n  }\n\n  save(): any {}\n\n  formatError(token: NearleyToken) {\n    const { line, col } = lineColFromIndex(this.input, token.start);\n    return `Parse error at token: ${token.text} at line ${line} column ${col}`;\n  }\n\n  has(name: string): boolean {\n    return name in TokenType;\n  }\n}\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,8BAAjC;AACA,SAAgBC,SAAhB,QAAiC,mBAAjC,C,CAEA;AACA;;AAGA,eAAe,MAAMC,YAAN,CAAmB;EACxBC,KAAK,GAAG,CAAH;EACLC,MAAM,GAAY,EAAZ;EACNC,KAAK,GAAG,EAAH;;EAEbC,WAAW,CAASC,QAAT,EAA+C;IAAA,KAAtCA,QAAsC,GAAtCA,QAAsC;EAAE;;EAE5DC,KAAK,CAACC,KAAD,EAAgBC,KAAhB,EAA4B;IAC/B,KAAKL,KAAL,GAAaI,KAAb;IACA,KAAKN,KAAL,GAAa,CAAb;IACA,KAAKC,MAAL,GAAc,KAAKG,QAAL,CAAcE,KAAd,CAAd;EACD;;EAEDE,IAAI,GAA6B;IAC/B,OAAO,KAAKP,MAAL,CAAY,KAAKD,KAAL,EAAZ,CAAP;EACD;;EAEDS,IAAI,GAAQ,CAAE;;EAEdC,WAAW,CAACC,KAAD,EAAsB;IAC/B,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAgBhB,gBAAgB,CAAC,KAAKK,KAAN,EAAaS,KAAK,CAACG,KAAnB,CAAtC;IACA,OAAQ,yBAAwBH,KAAK,CAACI,IAAK,YAAWH,IAAK,WAAUC,GAAI,EAAzE;EACD;;EAEDG,GAAG,CAACC,IAAD,EAAwB;IACzB,OAAOA,IAAI,IAAInB,SAAf;EACD;;AA1B+B"}