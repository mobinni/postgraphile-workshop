{"version":3,"file":"grammar.js","names":["id","d","LexerAdapter","NodeType","TokenType","lexer","chunk","unwrap","el","toKeywordNode","token","type","keyword","tokenType","text","raw","addComments","node","leading","trailing","length","leadingComments","trailingComments","addCommentsToArray","nodes","first","rest","lead","slice","last","grammar","Lexer","ParserRules","concat","statements","hasSemicolon","children","has","DELIMITER","EOF","delimiter","statement","expressions","clauses","COMMA","LIMIT","limitToken","_","exp1","optional","comma","exp2","limit_clause","limitKw","offset","count","RESERVED_SELECT","nameToken","exp","clause","nameKw","ASTERISK","all_columns_asterisk","RESERVED_CLAUSE","RESERVED_SET_OPERATION","set_operation","expr","chain","ARRAY_IDENTIFIER","arrayToken","brackets","array_subscript","array","identifier","parenthesis","ARRAY_KEYWORD","RESERVED_FUNCTION_NAME","parens","function_call","open","close","openParen","closeParen","DOT","object","_1","dot","_2","property","property_access","BETWEEN","AND","betweenToken","expr1","andToken","_3","expr2","between_predicate","betweenKw","andKw","CASE","END","caseToken","endToken","case_expression","caseKw","endKw","WHEN","THEN","whenToken","cond","thenToken","case_when","whenKw","thenKw","condition","result","ELSE","elseToken","case_else","elseKw","operator","OPERATOR","IDENTIFIER","QUOTED_IDENTIFIER","VARIABLE","NAMED_PARAMETER","QUOTED_PARAMETER","NUMBERED_PARAMETER","POSITIONAL_PARAMETER","CUSTOM_PARAMETER","parameter","key","NUMBER","STRING","literal","RESERVED_KEYWORD","RESERVED_PHRASE","RESERVED_JOIN","OR","XOR","comments","LINE_COMMENT","line_comment","precedingWhitespace","BLOCK_COMMENT","block_comment","ParserStart"],"sources":["../../src/parser/grammar.ts"],"sourcesContent":["// Generated automatically by nearley, version 2.20.1\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d: any[]): any { return d[0]; }\ndeclare var DELIMITER: any;\ndeclare var EOF: any;\ndeclare var LIMIT: any;\ndeclare var COMMA: any;\ndeclare var RESERVED_SELECT: any;\ndeclare var ASTERISK: any;\ndeclare var RESERVED_CLAUSE: any;\ndeclare var RESERVED_SET_OPERATION: any;\ndeclare var ARRAY_IDENTIFIER: any;\ndeclare var ARRAY_KEYWORD: any;\ndeclare var RESERVED_FUNCTION_NAME: any;\ndeclare var DOT: any;\ndeclare var BETWEEN: any;\ndeclare var AND: any;\ndeclare var CASE: any;\ndeclare var END: any;\ndeclare var WHEN: any;\ndeclare var THEN: any;\ndeclare var ELSE: any;\ndeclare var OPERATOR: any;\ndeclare var IDENTIFIER: any;\ndeclare var QUOTED_IDENTIFIER: any;\ndeclare var VARIABLE: any;\ndeclare var NAMED_PARAMETER: any;\ndeclare var QUOTED_PARAMETER: any;\ndeclare var NUMBERED_PARAMETER: any;\ndeclare var POSITIONAL_PARAMETER: any;\ndeclare var CUSTOM_PARAMETER: any;\ndeclare var NUMBER: any;\ndeclare var STRING: any;\ndeclare var RESERVED_KEYWORD: any;\ndeclare var RESERVED_PHRASE: any;\ndeclare var RESERVED_JOIN: any;\ndeclare var OR: any;\ndeclare var XOR: any;\ndeclare var LINE_COMMENT: any;\ndeclare var BLOCK_COMMENT: any;\n\nimport LexerAdapter from './LexerAdapter.js';\nimport { NodeType, AstNode, CommentNode, KeywordNode } from './ast.js';\nimport { Token, TokenType } from '../lexer/token.js';\n\n// The lexer here is only to provide the has() method,\n// that's used inside the generated grammar definition.\n// A proper lexer gets passed to Nearley Parser constructor.\nconst lexer = new LexerAdapter(chunk => []);\n\n// Used for unwrapping grammar rules like:\n//\n//   rule -> ( foo | bar | baz )\n//\n// which otherwise produce single element nested inside two arrays\nconst unwrap = <T>([[el]]: T[][]): T => el;\n\nconst toKeywordNode = (token: Token): KeywordNode => ({\n  type: NodeType.keyword,\n  tokenType: token.type,\n  text: token.text,\n  raw: token.raw,\n});\n\ninterface CommentAttachments {\n  leading?: CommentNode[];\n  trailing?: CommentNode[];\n}\n\nconst addComments = (node: AstNode, { leading, trailing }: CommentAttachments): AstNode => {\n  if (leading?.length) {\n    node = { ...node, leadingComments: leading };\n  }\n  if (trailing?.length) {\n    node = { ...node, trailingComments: trailing };\n  }\n  return node;\n};\n\nconst addCommentsToArray = (nodes: AstNode[], { leading, trailing }: CommentAttachments): AstNode[] => {\n  if (leading?.length) {\n    const [first, ...rest] = nodes;\n    nodes = [addComments(first, { leading }), ...rest];\n  }\n  if (trailing?.length) {\n    const lead = nodes.slice(0, -1);\n    const last = nodes[nodes.length-1];\n    nodes = [...lead, addComments(last, { trailing })];\n  }\n  return nodes;\n};\n\n\ninterface NearleyToken {\n  value: any;\n  [key: string]: any;\n};\n\ninterface NearleyLexer {\n  reset: (chunk: string, info: any) => void;\n  next: () => NearleyToken | undefined;\n  save: () => any;\n  formatError: (token: never) => string;\n  has: (tokenType: string) => boolean;\n};\n\ninterface NearleyRule {\n  name: string;\n  symbols: NearleySymbol[];\n  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\n};\n\ntype NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\n\ninterface Grammar {\n  Lexer: NearleyLexer | undefined;\n  ParserRules: NearleyRule[];\n  ParserStart: string;\n};\n\nconst grammar: Grammar = {\n  Lexer: lexer,\n  ParserRules: [\n    {\"name\": \"main$ebnf$1\", \"symbols\": []},\n    {\"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"statement\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main\", \"symbols\": [\"main$ebnf$1\"], \"postprocess\": \n        ([statements]) => {\n          const last = statements[statements.length - 1];\n          if (last && !last.hasSemicolon) {\n            // we have fully parsed the whole file\n            // discard the last statement when it's empty\n            return last.children.length > 0 ? statements : statements.slice(0, -1);\n          } else {\n            // parsing still in progress, do nothing\n            return statements;\n          }\n        }\n        },\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [(lexer.has(\"DELIMITER\") ? {type: \"DELIMITER\"} : DELIMITER)]},\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [(lexer.has(\"EOF\") ? {type: \"EOF\"} : EOF)]},\n    {\"name\": \"statement\", \"symbols\": [\"expressions_or_clauses\", \"statement$subexpression$1\"], \"postprocess\": \n        ([children, [delimiter]]) => ({\n          type: NodeType.statement,\n          children,\n          hasSemicolon: delimiter.type === TokenType.DELIMITER,\n        })\n        },\n    {\"name\": \"expressions_or_clauses$ebnf$1\", \"symbols\": []},\n    {\"name\": \"expressions_or_clauses$ebnf$1\", \"symbols\": [\"expressions_or_clauses$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expressions_or_clauses$ebnf$2\", \"symbols\": []},\n    {\"name\": \"expressions_or_clauses$ebnf$2\", \"symbols\": [\"expressions_or_clauses$ebnf$2\", \"clause\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expressions_or_clauses\", \"symbols\": [\"expressions_or_clauses$ebnf$1\", \"expressions_or_clauses$ebnf$2\"], \"postprocess\": \n        ([expressions, clauses]) => [...expressions, ...clauses]\n        },\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"limit_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"select_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"other_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"set_operation\"]},\n    {\"name\": \"clause\", \"symbols\": [\"clause$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"limit_clause$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"free_form_sql\"]},\n    {\"name\": \"limit_clause$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"limit_clause$ebnf$1$subexpression$1$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"limit_clause$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"COMMA\") ? {type: \"COMMA\"} : COMMA), \"limit_clause$ebnf$1$subexpression$1$ebnf$1\"]},\n    {\"name\": \"limit_clause$ebnf$1\", \"symbols\": [\"limit_clause$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"limit_clause$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"limit_clause\", \"symbols\": [(lexer.has(\"LIMIT\") ? {type: \"LIMIT\"} : LIMIT), \"_\", \"expression_chain_\", \"limit_clause$ebnf$1\"], \"postprocess\": \n        ([limitToken, _, exp1, optional]) => {\n          if (optional) {\n            const [comma, exp2] = optional;\n            return {\n              type: NodeType.limit_clause,\n              limitKw: addComments(toKeywordNode(limitToken), { trailing: _ }),\n              offset: exp1,\n              count: exp2,\n            };\n          } else {\n            return {\n              type: NodeType.limit_clause,\n              limitKw: addComments(toKeywordNode(limitToken), { trailing: _ }),\n              count: exp1,\n            };\n          }\n        }\n        },\n    {\"name\": \"select_clause$subexpression$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"select_clause$subexpression$1$ebnf$1\", \"symbols\": [\"select_clause$subexpression$1$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_clause$subexpression$1\", \"symbols\": [\"all_columns_asterisk\", \"select_clause$subexpression$1$ebnf$1\"]},\n    {\"name\": \"select_clause$subexpression$1$ebnf$2\", \"symbols\": []},\n    {\"name\": \"select_clause$subexpression$1$ebnf$2\", \"symbols\": [\"select_clause$subexpression$1$ebnf$2\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_clause$subexpression$1\", \"symbols\": [\"asteriskless_free_form_sql\", \"select_clause$subexpression$1$ebnf$2\"]},\n    {\"name\": \"select_clause\", \"symbols\": [(lexer.has(\"RESERVED_SELECT\") ? {type: \"RESERVED_SELECT\"} : RESERVED_SELECT), \"select_clause$subexpression$1\"], \"postprocess\": \n        ([nameToken, [exp, expressions]]) => ({\n          type: NodeType.clause,\n          nameKw: toKeywordNode(nameToken),\n          children: [exp, ...expressions],\n        })\n        },\n    {\"name\": \"select_clause\", \"symbols\": [(lexer.has(\"RESERVED_SELECT\") ? {type: \"RESERVED_SELECT\"} : RESERVED_SELECT)], \"postprocess\": \n        ([nameToken]) => ({\n          type: NodeType.clause,\n          nameKw: toKeywordNode(nameToken),\n          children: [],\n        })\n        },\n    {\"name\": \"all_columns_asterisk\", \"symbols\": [(lexer.has(\"ASTERISK\") ? {type: \"ASTERISK\"} : ASTERISK)], \"postprocess\": \n        () => ({ type: NodeType.all_columns_asterisk })\n        },\n    {\"name\": \"other_clause$ebnf$1\", \"symbols\": []},\n    {\"name\": \"other_clause$ebnf$1\", \"symbols\": [\"other_clause$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"other_clause\", \"symbols\": [(lexer.has(\"RESERVED_CLAUSE\") ? {type: \"RESERVED_CLAUSE\"} : RESERVED_CLAUSE), \"other_clause$ebnf$1\"], \"postprocess\": \n        ([nameToken, children]) => ({\n          type: NodeType.clause,\n          nameKw: toKeywordNode(nameToken),\n          children,\n        })\n        },\n    {\"name\": \"set_operation$ebnf$1\", \"symbols\": []},\n    {\"name\": \"set_operation$ebnf$1\", \"symbols\": [\"set_operation$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"set_operation\", \"symbols\": [(lexer.has(\"RESERVED_SET_OPERATION\") ? {type: \"RESERVED_SET_OPERATION\"} : RESERVED_SET_OPERATION), \"set_operation$ebnf$1\"], \"postprocess\": \n        ([nameToken, children]) => ({\n          type: NodeType.set_operation,\n          nameKw: toKeywordNode(nameToken),\n          children,\n        })\n        },\n    {\"name\": \"expression_chain_$ebnf$1\", \"symbols\": [\"expression_with_comments_\"]},\n    {\"name\": \"expression_chain_$ebnf$1\", \"symbols\": [\"expression_chain_$ebnf$1\", \"expression_with_comments_\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expression_chain_\", \"symbols\": [\"expression_chain_$ebnf$1\"], \"postprocess\": id},\n    {\"name\": \"expression_chain$ebnf$1\", \"symbols\": []},\n    {\"name\": \"expression_chain$ebnf$1\", \"symbols\": [\"expression_chain$ebnf$1\", \"_expression_with_comments\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expression_chain\", \"symbols\": [\"expression\", \"expression_chain$ebnf$1\"], \"postprocess\": \n        ([expr, chain]) => [expr, ...chain]\n        },\n    {\"name\": \"andless_expression_chain$ebnf$1\", \"symbols\": []},\n    {\"name\": \"andless_expression_chain$ebnf$1\", \"symbols\": [\"andless_expression_chain$ebnf$1\", \"_andless_expression_with_comments\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"andless_expression_chain\", \"symbols\": [\"andless_expression\", \"andless_expression_chain$ebnf$1\"], \"postprocess\": \n        ([expr, chain]) => [expr, ...chain]\n        },\n    {\"name\": \"expression_with_comments_\", \"symbols\": [\"expression\", \"_\"], \"postprocess\": \n        ([expr, _]) => addComments(expr, { trailing: _ })\n        },\n    {\"name\": \"_expression_with_comments\", \"symbols\": [\"_\", \"expression\"], \"postprocess\": \n        ([_, expr]) => addComments(expr, { leading: _ })\n        },\n    {\"name\": \"_andless_expression_with_comments\", \"symbols\": [\"_\", \"andless_expression\"], \"postprocess\": \n        ([_, expr]) => addComments(expr, { leading: _ })\n        },\n    {\"name\": \"free_form_sql$subexpression$1\", \"symbols\": [\"asteriskless_free_form_sql\"]},\n    {\"name\": \"free_form_sql$subexpression$1\", \"symbols\": [\"asterisk\"]},\n    {\"name\": \"free_form_sql\", \"symbols\": [\"free_form_sql$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"asteriskless_free_form_sql$subexpression$1\", \"symbols\": [\"asteriskless_andless_expression\"]},\n    {\"name\": \"asteriskless_free_form_sql$subexpression$1\", \"symbols\": [\"logic_operator\"]},\n    {\"name\": \"asteriskless_free_form_sql$subexpression$1\", \"symbols\": [\"between_predicate\"]},\n    {\"name\": \"asteriskless_free_form_sql$subexpression$1\", \"symbols\": [\"comma\"]},\n    {\"name\": \"asteriskless_free_form_sql$subexpression$1\", \"symbols\": [\"comment\"]},\n    {\"name\": \"asteriskless_free_form_sql$subexpression$1\", \"symbols\": [\"other_keyword\"]},\n    {\"name\": \"asteriskless_free_form_sql\", \"symbols\": [\"asteriskless_free_form_sql$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"expression$subexpression$1\", \"symbols\": [\"andless_expression\"]},\n    {\"name\": \"expression$subexpression$1\", \"symbols\": [\"logic_operator\"]},\n    {\"name\": \"expression\", \"symbols\": [\"expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"andless_expression$subexpression$1\", \"symbols\": [\"asteriskless_andless_expression\"]},\n    {\"name\": \"andless_expression$subexpression$1\", \"symbols\": [\"asterisk\"]},\n    {\"name\": \"andless_expression\", \"symbols\": [\"andless_expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"array_subscript\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"case_expression\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"function_call\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"property_access\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"parenthesis\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"curly_braces\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"square_brackets\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"operator\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"identifier\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"parameter\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"literal\"]},\n    {\"name\": \"asteriskless_andless_expression$subexpression$1\", \"symbols\": [\"keyword\"]},\n    {\"name\": \"asteriskless_andless_expression\", \"symbols\": [\"asteriskless_andless_expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"array_subscript\", \"symbols\": [(lexer.has(\"ARRAY_IDENTIFIER\") ? {type: \"ARRAY_IDENTIFIER\"} : ARRAY_IDENTIFIER), \"_\", \"square_brackets\"], \"postprocess\": \n        ([arrayToken, _, brackets]) => ({\n          type: NodeType.array_subscript,\n          array: addComments({ type: NodeType.identifier, text: arrayToken.text}, { trailing: _ }),\n          parenthesis: brackets,\n        })\n        },\n    {\"name\": \"array_subscript\", \"symbols\": [(lexer.has(\"ARRAY_KEYWORD\") ? {type: \"ARRAY_KEYWORD\"} : ARRAY_KEYWORD), \"_\", \"square_brackets\"], \"postprocess\": \n        ([arrayToken, _, brackets]) => ({\n          type: NodeType.array_subscript,\n          array: addComments(toKeywordNode(arrayToken), { trailing: _ }),\n          parenthesis: brackets,\n        })\n        },\n    {\"name\": \"function_call\", \"symbols\": [(lexer.has(\"RESERVED_FUNCTION_NAME\") ? {type: \"RESERVED_FUNCTION_NAME\"} : RESERVED_FUNCTION_NAME), \"_\", \"parenthesis\"], \"postprocess\": \n        ([nameToken, _, parens]) => ({\n          type: NodeType.function_call,\n          nameKw: addComments(toKeywordNode(nameToken), { trailing: _ }),\n          parenthesis: parens,\n        })\n        },\n    {\"name\": \"parenthesis\", \"symbols\": [{\"literal\":\"(\"}, \"expressions_or_clauses\", {\"literal\":\")\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"(\",\n          closeParen: \")\",\n        })\n        },\n    {\"name\": \"curly_braces$ebnf$1\", \"symbols\": []},\n    {\"name\": \"curly_braces$ebnf$1\", \"symbols\": [\"curly_braces$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"curly_braces\", \"symbols\": [{\"literal\":\"{\"}, \"curly_braces$ebnf$1\", {\"literal\":\"}\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"{\",\n          closeParen: \"}\",\n        })\n        },\n    {\"name\": \"square_brackets$ebnf$1\", \"symbols\": []},\n    {\"name\": \"square_brackets$ebnf$1\", \"symbols\": [\"square_brackets$ebnf$1\", \"free_form_sql\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"square_brackets\", \"symbols\": [{\"literal\":\"[\"}, \"square_brackets$ebnf$1\", {\"literal\":\"]\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"[\",\n          closeParen: \"]\",\n        })\n        },\n    {\"name\": \"property_access$subexpression$1\", \"symbols\": [\"identifier\"]},\n    {\"name\": \"property_access$subexpression$1\", \"symbols\": [\"array_subscript\"]},\n    {\"name\": \"property_access$subexpression$1\", \"symbols\": [\"all_columns_asterisk\"]},\n    {\"name\": \"property_access\", \"symbols\": [\"expression\", \"_\", (lexer.has(\"DOT\") ? {type: \"DOT\"} : DOT), \"_\", \"property_access$subexpression$1\"], \"postprocess\": \n        // Allowing property to be <array_subscript> is currently a hack.\n        // A better way would be to allow <property_access> on the left side of array_subscript,\n        // but we currently can't do that because of another hack that requires\n        // %ARRAY_IDENTIFIER on the left side of <array_subscript>.\n        ([object, _1, dot, _2, [property]]) => {\n          return {\n            type: NodeType.property_access,\n            object: addComments(object, { trailing: _1 }),\n            property: addComments(property, { leading: _2 }),\n          };\n        }\n        },\n    {\"name\": \"between_predicate\", \"symbols\": [(lexer.has(\"BETWEEN\") ? {type: \"BETWEEN\"} : BETWEEN), \"_\", \"andless_expression_chain\", \"_\", (lexer.has(\"AND\") ? {type: \"AND\"} : AND), \"_\", \"andless_expression\"], \"postprocess\": \n        ([betweenToken, _1, expr1, _2, andToken, _3, expr2]) => ({\n          type: NodeType.between_predicate,\n          betweenKw: toKeywordNode(betweenToken),\n          expr1: addCommentsToArray(expr1, { leading: _1, trailing: _2 }),\n          andKw: toKeywordNode(andToken),\n          expr2: [addComments(expr2, { leading: _3 })],\n        })\n        },\n    {\"name\": \"case_expression$ebnf$1\", \"symbols\": [\"expression_chain_\"], \"postprocess\": id},\n    {\"name\": \"case_expression$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"case_expression$ebnf$2\", \"symbols\": []},\n    {\"name\": \"case_expression$ebnf$2\", \"symbols\": [\"case_expression$ebnf$2\", \"case_clause\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"case_expression\", \"symbols\": [(lexer.has(\"CASE\") ? {type: \"CASE\"} : CASE), \"_\", \"case_expression$ebnf$1\", \"case_expression$ebnf$2\", (lexer.has(\"END\") ? {type: \"END\"} : END)], \"postprocess\": \n        ([caseToken, _, expr, clauses, endToken]) => ({\n          type: NodeType.case_expression,\n          caseKw: addComments(toKeywordNode(caseToken), { trailing: _ }),\n          endKw: toKeywordNode(endToken),\n          expr: expr || [],\n          clauses,\n        })\n        },\n    {\"name\": \"case_clause\", \"symbols\": [(lexer.has(\"WHEN\") ? {type: \"WHEN\"} : WHEN), \"_\", \"expression_chain_\", (lexer.has(\"THEN\") ? {type: \"THEN\"} : THEN), \"_\", \"expression_chain_\"], \"postprocess\": \n        ([whenToken, _1, cond, thenToken, _2, expr]) => ({\n          type: NodeType.case_when,\n          whenKw: addComments(toKeywordNode(whenToken), { trailing: _1 }),\n          thenKw: addComments(toKeywordNode(thenToken), { trailing: _2 }),\n          condition: cond,\n          result: expr,\n        })\n        },\n    {\"name\": \"case_clause\", \"symbols\": [(lexer.has(\"ELSE\") ? {type: \"ELSE\"} : ELSE), \"_\", \"expression_chain_\"], \"postprocess\": \n        ([elseToken, _, expr]) => ({\n          type: NodeType.case_else,\n          elseKw: addComments(toKeywordNode(elseToken), { trailing: _ }),\n          result: expr,\n        })\n        },\n    {\"name\": \"comma$subexpression$1\", \"symbols\": [(lexer.has(\"COMMA\") ? {type: \"COMMA\"} : COMMA)]},\n    {\"name\": \"comma\", \"symbols\": [\"comma$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.comma })},\n    {\"name\": \"asterisk$subexpression$1\", \"symbols\": [(lexer.has(\"ASTERISK\") ? {type: \"ASTERISK\"} : ASTERISK)]},\n    {\"name\": \"asterisk\", \"symbols\": [\"asterisk$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.operator, text: token.text })},\n    {\"name\": \"operator$subexpression$1\", \"symbols\": [(lexer.has(\"OPERATOR\") ? {type: \"OPERATOR\"} : OPERATOR)]},\n    {\"name\": \"operator\", \"symbols\": [\"operator$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.operator, text: token.text })},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"IDENTIFIER\") ? {type: \"IDENTIFIER\"} : IDENTIFIER)]},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"QUOTED_IDENTIFIER\") ? {type: \"QUOTED_IDENTIFIER\"} : QUOTED_IDENTIFIER)]},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"VARIABLE\") ? {type: \"VARIABLE\"} : VARIABLE)]},\n    {\"name\": \"identifier\", \"symbols\": [\"identifier$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.identifier, text: token.text })},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"NAMED_PARAMETER\") ? {type: \"NAMED_PARAMETER\"} : NAMED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"QUOTED_PARAMETER\") ? {type: \"QUOTED_PARAMETER\"} : QUOTED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"NUMBERED_PARAMETER\") ? {type: \"NUMBERED_PARAMETER\"} : NUMBERED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"POSITIONAL_PARAMETER\") ? {type: \"POSITIONAL_PARAMETER\"} : POSITIONAL_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"CUSTOM_PARAMETER\") ? {type: \"CUSTOM_PARAMETER\"} : CUSTOM_PARAMETER)]},\n    {\"name\": \"parameter\", \"symbols\": [\"parameter$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.parameter, key: token.key, text: token.text })},\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [(lexer.has(\"NUMBER\") ? {type: \"NUMBER\"} : NUMBER)]},\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [(lexer.has(\"STRING\") ? {type: \"STRING\"} : STRING)]},\n    {\"name\": \"literal\", \"symbols\": [\"literal$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.literal, text: token.text })},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_KEYWORD\") ? {type: \"RESERVED_KEYWORD\"} : RESERVED_KEYWORD)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_PHRASE\") ? {type: \"RESERVED_PHRASE\"} : RESERVED_PHRASE)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_JOIN\") ? {type: \"RESERVED_JOIN\"} : RESERVED_JOIN)]},\n    {\"name\": \"keyword\", \"symbols\": [\"keyword$subexpression$1\"], \"postprocess\": \n        ([[token]]) => toKeywordNode(token)\n        },\n    {\"name\": \"logic_operator$subexpression$1\", \"symbols\": [(lexer.has(\"AND\") ? {type: \"AND\"} : AND)]},\n    {\"name\": \"logic_operator$subexpression$1\", \"symbols\": [(lexer.has(\"OR\") ? {type: \"OR\"} : OR)]},\n    {\"name\": \"logic_operator$subexpression$1\", \"symbols\": [(lexer.has(\"XOR\") ? {type: \"XOR\"} : XOR)]},\n    {\"name\": \"logic_operator\", \"symbols\": [\"logic_operator$subexpression$1\"], \"postprocess\": \n        ([[token]]) => toKeywordNode(token)\n        },\n    {\"name\": \"other_keyword$subexpression$1\", \"symbols\": [(lexer.has(\"WHEN\") ? {type: \"WHEN\"} : WHEN)]},\n    {\"name\": \"other_keyword$subexpression$1\", \"symbols\": [(lexer.has(\"THEN\") ? {type: \"THEN\"} : THEN)]},\n    {\"name\": \"other_keyword$subexpression$1\", \"symbols\": [(lexer.has(\"ELSE\") ? {type: \"ELSE\"} : ELSE)]},\n    {\"name\": \"other_keyword$subexpression$1\", \"symbols\": [(lexer.has(\"END\") ? {type: \"END\"} : END)]},\n    {\"name\": \"other_keyword\", \"symbols\": [\"other_keyword$subexpression$1\"], \"postprocess\": \n        ([[token]]) => toKeywordNode(token)\n        },\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", \"comment\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": ([comments]) => comments},\n    {\"name\": \"comment\", \"symbols\": [(lexer.has(\"LINE_COMMENT\") ? {type: \"LINE_COMMENT\"} : LINE_COMMENT)], \"postprocess\": \n        ([token]) => ({\n          type: NodeType.line_comment,\n          text: token.text,\n          precedingWhitespace: token.precedingWhitespace,\n        })\n        },\n    {\"name\": \"comment\", \"symbols\": [(lexer.has(\"BLOCK_COMMENT\") ? {type: \"BLOCK_COMMENT\"} : BLOCK_COMMENT)], \"postprocess\": \n        ([token]) => ({\n          type: NodeType.block_comment,\n          text: token.text,\n          precedingWhitespace: token.precedingWhitespace,\n        })\n        }\n  ],\n  ParserStart: \"main\",\n};\n\nexport default grammar;\n"],"mappings":"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"}