{"version":3,"file":"token.js","names":["TokenType","createEofToken","index","type","EOF","raw","text","start","EOF_TOKEN","Infinity","testToken","compareToken","token","isToken","ARRAY","RESERVED_KEYWORD","BY","SET","RESERVED_CLAUSE","STRUCT","WINDOW","isReserved","RESERVED_FUNCTION_NAME","RESERVED_PHRASE","RESERVED_SELECT","RESERVED_SET_OPERATION","RESERVED_JOIN","ARRAY_KEYWORD","CASE","END","WHEN","ELSE","THEN","LIMIT","BETWEEN","AND","OR","XOR","isLogicalOperator"],"sources":["../../src/lexer/token.ts"],"sourcesContent":["/** Token type enum for all possible Token categories */\nexport enum TokenType {\n  QUOTED_IDENTIFIER = 'QUOTED_IDENTIFIER',\n  IDENTIFIER = 'IDENTIFIER',\n  STRING = 'STRING',\n  VARIABLE = 'VARIABLE',\n  RESERVED_KEYWORD = 'RESERVED_KEYWORD',\n  RESERVED_FUNCTION_NAME = 'RESERVED_FUNCTION_NAME',\n  RESERVED_PHRASE = 'RESERVED_PHRASE',\n  RESERVED_SET_OPERATION = 'RESERVED_SET_OPERATION',\n  RESERVED_CLAUSE = 'RESERVED_CLAUSE',\n  RESERVED_SELECT = 'RESERVED_SELECT',\n  RESERVED_JOIN = 'RESERVED_JOIN',\n  ARRAY_IDENTIFIER = 'ARRAY_IDENTIFIER', // IDENTIFIER token in front of [\n  ARRAY_KEYWORD = 'ARRAY_KEYWORD', // RESERVED_KEYWORD token in front of [\n  CASE = 'CASE',\n  END = 'END',\n  WHEN = 'WHEN',\n  ELSE = 'ELSE',\n  THEN = 'THEN',\n  LIMIT = 'LIMIT',\n  BETWEEN = 'BETWEEN',\n  AND = 'AND',\n  OR = 'OR',\n  XOR = 'XOR',\n  OPERATOR = 'OPERATOR',\n  COMMA = 'COMMA',\n  ASTERISK = 'ASTERISK', // *\n  DOT = 'DOT', // .\n  OPEN_PAREN = 'OPEN_PAREN',\n  CLOSE_PAREN = 'CLOSE_PAREN',\n  LINE_COMMENT = 'LINE_COMMENT',\n  BLOCK_COMMENT = 'BLOCK_COMMENT',\n  NUMBER = 'NUMBER',\n  NAMED_PARAMETER = 'NAMED_PARAMETER',\n  QUOTED_PARAMETER = 'QUOTED_PARAMETER',\n  NUMBERED_PARAMETER = 'NUMBERED_PARAMETER',\n  POSITIONAL_PARAMETER = 'POSITIONAL_PARAMETER',\n  CUSTOM_PARAMETER = 'CUSTOM_PARAMETER',\n  DELIMITER = 'DELIMITER',\n  EOF = 'EOF',\n}\n\n/** Struct to store the most basic cohesive unit of language grammar */\nexport interface Token {\n  type: TokenType;\n  raw: string; // The raw original text that was matched\n  text: string; // Cleaned up text e.g. keyword converted to uppercase and extra spaces removed\n  key?: string;\n  start: number;\n  precedingWhitespace?: string; // Whitespace before this token, if any\n}\n\n/** Creates EOF token positioned at given location */\nexport const createEofToken = (index: number) => ({\n  type: TokenType.EOF,\n  raw: '«EOF»',\n  text: '«EOF»',\n  start: index,\n});\n\n/**\n * For use as a \"missing token\"\n * e.g. in lookAhead and lookBehind to avoid dealing with null values\n */\nexport const EOF_TOKEN = createEofToken(Infinity);\n\n/** Checks if two tokens are equivalent */\nexport const testToken =\n  (compareToken: { type: TokenType; text: string }) =>\n  (token: Token): boolean =>\n    token.type === compareToken.type && token.text === compareToken.text;\n\n/** Util object that allows for easy checking of Reserved Keywords */\nexport const isToken = {\n  ARRAY: testToken({ text: 'ARRAY', type: TokenType.RESERVED_KEYWORD }),\n  BY: testToken({ text: 'BY', type: TokenType.RESERVED_KEYWORD }),\n  SET: testToken({ text: 'SET', type: TokenType.RESERVED_CLAUSE }),\n  STRUCT: testToken({ text: 'STRUCT', type: TokenType.RESERVED_KEYWORD }),\n  WINDOW: testToken({ text: 'WINDOW', type: TokenType.RESERVED_CLAUSE }),\n};\n\n/** Checks if token is any Reserved Keyword or Clause */\nexport const isReserved = (type: TokenType): boolean =>\n  type === TokenType.RESERVED_KEYWORD ||\n  type === TokenType.RESERVED_FUNCTION_NAME ||\n  type === TokenType.RESERVED_PHRASE ||\n  type === TokenType.RESERVED_CLAUSE ||\n  type === TokenType.RESERVED_SELECT ||\n  type === TokenType.RESERVED_SET_OPERATION ||\n  type === TokenType.RESERVED_JOIN ||\n  type === TokenType.ARRAY_KEYWORD ||\n  type === TokenType.CASE ||\n  type === TokenType.END ||\n  type === TokenType.WHEN ||\n  type === TokenType.ELSE ||\n  type === TokenType.THEN ||\n  type === TokenType.LIMIT ||\n  type === TokenType.BETWEEN ||\n  type === TokenType.AND ||\n  type === TokenType.OR ||\n  type === TokenType.XOR;\n\nexport const isLogicalOperator = (type: TokenType): boolean =>\n  type === TokenType.AND || type === TokenType.OR || type === TokenType.XOR;\n"],"mappings":"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"}