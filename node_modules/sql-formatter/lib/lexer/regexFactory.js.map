{"version":3,"file":"regexFactory.js","names":["sortByLengthDesc","escapeRegExp","patternToRegex","prefixesPattern","withDashes","lineComment","lineCommentTypes","RegExp","map","join","parenthesis","kind","extraParens","index","parens","pair","operator","operators","rejectIdentCharsPattern","rest","dashes","reservedWord","reservedKeywords","identChars","length","avoidIdentChars","reservedKeywordsPattern","replace","parameter","paramTypes","pattern","undefined","typesRegex","buildQStringPatterns","specialDelimiterMap","singlePattern","patternList","Object","entries","left","right","specialDelimiters","keys","standardDelimiterPattern","String","raw","qStringPattern","quotePatterns","singleQuotePattern","quoteTypes","regex","quote","variable","varTypes","varType","stringPattern","string","identifier","specialChars","identifierPattern","first","allowFirstCharNumber","letter","number","firstChars","restChars"],"sources":["../../src/lexer/regexFactory.ts"],"sourcesContent":["import { sortByLengthDesc } from '../utils.js';\n\nimport { IdentChars, QuoteType, VariableType } from './TokenizerOptions.js';\nimport { escapeRegExp, patternToRegex, prefixesPattern, withDashes } from './regexUtil.js';\n\n/**\n * Builds a RegExp for valid line comments in a SQL dialect\n * @param {string[]} lineCommentTypes - list of character strings that denote line comments\n */\nexport const lineComment = (lineCommentTypes: string[]) =>\n  new RegExp(`(?:${lineCommentTypes.map(escapeRegExp).join('|')}).*?(?=\\r\\n|\\r|\\n|$)`, 'uy');\n\n/**\n * Builds a RegExp for matching either open- or close-parenthesis patterns\n */\nexport const parenthesis = (kind: 'open' | 'close', extraParens: ('[]' | '{}')[] = []): RegExp => {\n  const index = kind === 'open' ? 0 : 1;\n  const parens = ['()', ...extraParens].map(pair => pair[index]);\n  return patternToRegex(parens.map(escapeRegExp).join('|'));\n};\n\n/**\n * Builds a RegExp containing all operators for a SQL dialect\n */\nexport const operator = (operators: string[]) =>\n  patternToRegex(`${sortByLengthDesc(operators).map(escapeRegExp).join('|')}`);\n\n// Negative lookahead to avoid matching a keyword that's actually part of identifier,\n// which can happen when identifier allows word-boundary characters inside it.\n//\n// For example \"SELECT$ME\" should be tokenized as:\n// - [\"SELECT$ME\"] when $ is allowed inside identifiers\n// - [\"SELECT\", \"$\", \"ME\"] when $ can't be part of identifiers.\nconst rejectIdentCharsPattern = ({ rest, dashes }: IdentChars): string =>\n  rest || dashes ? `(?![${rest || ''}${dashes ? '-' : ''}])` : '';\n\n/**\n * Builds a RegExp for all Reserved Keywords in a SQL dialect\n */\nexport const reservedWord = (reservedKeywords: string[], identChars: IdentChars = {}): RegExp => {\n  if (reservedKeywords.length === 0) {\n    return /^\\b$/u;\n  }\n\n  const avoidIdentChars = rejectIdentCharsPattern(identChars);\n\n  const reservedKeywordsPattern = sortByLengthDesc(reservedKeywords)\n    .map(escapeRegExp)\n    .join('|')\n    .replace(/ /gu, '\\\\s+');\n\n  return new RegExp(`(?:${reservedKeywordsPattern})${avoidIdentChars}\\\\b`, 'iuy');\n};\n\n/**\n * Builds a RegExp for parameter placeholder patterns\n * @param {string[]} paramTypes - list of strings that denote placeholder types\n * @param {string} pattern - string that denotes placeholder pattern\n */\nexport const parameter = (paramTypes: string[], pattern: string): RegExp | undefined => {\n  if (!paramTypes.length) {\n    return undefined;\n  }\n  const typesRegex = paramTypes.map(escapeRegExp).join('|');\n\n  return patternToRegex(`(?:${typesRegex})(?:${pattern})`);\n};\n\nconst buildQStringPatterns = () => {\n  const specialDelimiterMap = {\n    '<': '>',\n    '[': ']',\n    '(': ')',\n    '{': '}',\n  };\n\n  // base pattern for special delimiters, left must correspond with right\n  const singlePattern = \"{left}(?:(?!{right}').)*?{right}\";\n\n  // replace {left} and {right} with delimiters, collect as array\n  const patternList = Object.entries(specialDelimiterMap).map(([left, right]) =>\n    singlePattern.replace(/{left}/g, escapeRegExp(left)).replace(/{right}/g, escapeRegExp(right))\n  );\n\n  const specialDelimiters = escapeRegExp(Object.keys(specialDelimiterMap).join(''));\n  // standard pattern for common delimiters, ignores special delimiters\n  const standardDelimiterPattern = String.raw`(?<tag>[^\\s${specialDelimiters}])(?:(?!\\k<tag>').)*?\\k<tag>`;\n\n  // constructs final pattern by joining all cases\n  const qStringPattern = `[Qq]'(?:${standardDelimiterPattern}|${patternList.join('|')})'`;\n\n  return qStringPattern;\n};\n\n// Regex patterns for all supported quote styles.\n//\n// Most of them have a single escaping-style built in,\n// but \"\" and '' support multiple versions of escapes,\n// which must be selected with suffixes: -qq, -bs, -qq-bs, -raw\nexport const quotePatterns = {\n  // - backtick quoted (using `` to escape)\n  '``': '(?:`[^`]*`)+',\n  // - Transact-SQL square bracket quoted (using ]] to escape)\n  '[]': String.raw`(?:\\[[^\\]]*\\])(?:\\][^\\]]*\\])*`,\n  // double-quoted\n  '\"\"-qq': String.raw`(?:\"[^\"]*\")+`, // with repeated quote escapes\n  '\"\"-bs': String.raw`(?:\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")`, // with backslash escapes\n  '\"\"-qq-bs': String.raw`(?:\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")+`, // with repeated quote or backslash escapes\n  '\"\"-raw': String.raw`(?:\"[^\"]*\")`, // no escaping\n  // single-quoted\n  \"''-qq\": String.raw`(?:'[^']*')+`, // with repeated quote escapes\n  \"''-bs\": String.raw`(?:'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')`, // with backslash escapes\n  \"''-qq-bs\": String.raw`(?:'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')+`, // with repeated quote or backslash escapes\n  \"''-raw\": String.raw`(?:'[^']*')`, // no escaping\n  // PostgreSQL dollar-quoted\n  '$$': String.raw`(?<tag>\\$\\w*\\$)[\\s\\S]*?\\k<tag>`,\n  // BigQuery '''triple-quoted''' (using \\' to escape)\n  \"'''..'''\": String.raw`'''[^\\\\]*?(?:\\\\.[^\\\\]*?)*?'''`,\n  // BigQuery \"\"\"triple-quoted\"\"\" (using \\\" to escape)\n  '\"\"\"..\"\"\"': String.raw`\"\"\"[^\\\\]*?(?:\\\\.[^\\\\]*?)*?\"\"\"`,\n  // Hive and Spark variables: ${name}\n  '{}': String.raw`(?:\\{[^\\}]*\\})`,\n  // Oracle q'' strings: q'<text>' q'|text|' ...\n  \"q''\": buildQStringPatterns(),\n};\n\nconst singleQuotePattern = (quoteTypes: QuoteType): string => {\n  if (typeof quoteTypes === 'string') {\n    return quotePatterns[quoteTypes];\n  } else if ('regex' in quoteTypes) {\n    return quoteTypes.regex;\n  } else {\n    return prefixesPattern(quoteTypes) + quotePatterns[quoteTypes.quote];\n  }\n};\n\n/** Builds a RegExp for matching variables */\nexport const variable = (varTypes: VariableType[]): RegExp =>\n  patternToRegex(\n    varTypes\n      .map(varType => ('regex' in varType ? varType.regex : singleQuotePattern(varType)))\n      .join('|')\n  );\n\n/** Builds a quote-delimited pattern for matching all given quote types */\nexport const stringPattern = (quoteTypes: QuoteType[]): string =>\n  quoteTypes.map(singleQuotePattern).join('|');\n\n/** Builds a RegExp for matching quote-delimited patterns */\nexport const string = (quoteTypes: QuoteType[]): RegExp =>\n  patternToRegex(stringPattern(quoteTypes));\n\n/**\n * Builds a RegExp for valid identifiers in a SQL dialect\n */\nexport const identifier = (specialChars: IdentChars = {}): RegExp =>\n  patternToRegex(identifierPattern(specialChars));\n\n/**\n * Builds a RegExp string for valid identifiers in a SQL dialect\n */\nexport const identifierPattern = ({\n  first,\n  rest,\n  dashes,\n  allowFirstCharNumber,\n}: IdentChars = {}): string => {\n  // Unicode letters, diacritical marks and underscore\n  const letter = '\\\\p{Alphabetic}\\\\p{Mark}_';\n  // Numbers 0..9, plus various unicode numbers\n  const number = '\\\\p{Decimal_Number}';\n\n  const firstChars = escapeRegExp(first ?? '');\n  const restChars = escapeRegExp(rest ?? '');\n\n  const pattern = allowFirstCharNumber\n    ? `[${letter}${number}${firstChars}][${letter}${number}${restChars}]*`\n    : `[${letter}${firstChars}][${letter}${number}${restChars}]*`;\n\n  return dashes ? withDashes(pattern) : pattern;\n};\n"],"mappings":"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"}