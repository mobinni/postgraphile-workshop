{"version":3,"file":"regexUtil.js","names":["escapeRegExp","string","replace","WHITESPACE_REGEX","patternToRegex","pattern","RegExp","toCaseInsensitivePattern","prefix","split","map","char","test","toUpperCase","toLowerCase","join","withDashes","prefixesPattern","prefixes","requirePrefix"],"sources":["../../src/lexer/regexUtil.ts"],"sourcesContent":["import { PrefixedQuoteType } from './TokenizerOptions.js';\n\n// Escapes regex special chars\nexport const escapeRegExp = (string: string) => string.replace(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n\nexport const WHITESPACE_REGEX = /\\s+/uy;\n\nexport const patternToRegex = (pattern: string): RegExp => new RegExp(`(?:${pattern})`, 'uy');\n\n// Converts \"ab\" to \"[Aa][Bb]\"\nexport const toCaseInsensitivePattern = (prefix: string): string =>\n  prefix\n    .split('')\n    .map(char => (/ /gu.test(char) ? '\\\\s+' : `[${char.toUpperCase()}${char.toLowerCase()}]`))\n    .join('');\n\nexport const withDashes = (pattern: string): string => pattern + '(?:-' + pattern + ')*';\n\n// Converts [\"a\", \"b\"] to \"(?:[Aa]|[Bb]|)\" or \"(?:[Aa]|[Bb])\" when required = true\nexport const prefixesPattern = ({ prefixes, requirePrefix }: PrefixedQuoteType): string =>\n  `(?:${prefixes.map(toCaseInsensitivePattern).join('|')}${requirePrefix ? '' : '|'})`;\n"],"mappings":"AAEA;AACA,OAAO,MAAMA,YAAY,GAAIC,MAAD,IAAoBA,MAAM,CAACC,OAAP,CAAe,sBAAf,EAAuC,MAAvC,CAAzC;AAEP,OAAO,MAAMC,gBAAgB,GAAG,OAAzB;AAEP,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAA6B,IAAIC,MAAJ,CAAY,MAAKD,OAAQ,GAAzB,EAA6B,IAA7B,CAApD,C,CAEP;;AACA,OAAO,MAAME,wBAAwB,GAAIC,MAAD,IACtCA,MAAM,CACHC,KADH,CACS,EADT,EAEGC,GAFH,CAEOC,IAAI,IAAK,MAAMC,IAAN,CAAWD,IAAX,IAAmB,MAAnB,GAA6B,IAAGA,IAAI,CAACE,WAAL,EAAmB,GAAEF,IAAI,CAACG,WAAL,EAAmB,GAFxF,EAGGC,IAHH,CAGQ,EAHR,CADK;AAMP,OAAO,MAAMC,UAAU,GAAIX,OAAD,IAA6BA,OAAO,GAAG,MAAV,GAAmBA,OAAnB,GAA6B,IAA7E,C,CAEP;;AACA,OAAO,MAAMY,eAAe,GAAG,CAAC;EAAEC,QAAF;EAAYC;AAAZ,CAAD,KAC5B,MAAKD,QAAQ,CAACR,GAAT,CAAaH,wBAAb,EAAuCQ,IAAvC,CAA4C,GAA5C,CAAiD,GAAEI,aAAa,GAAG,EAAH,GAAQ,GAAI,GAD7E"}