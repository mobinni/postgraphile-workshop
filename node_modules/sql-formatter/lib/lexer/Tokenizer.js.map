{"version":3,"file":"Tokenizer.js","names":["TokenType","regex","TokenizerEngine","escapeRegExp","patternToRegex","equalizeWhitespace","NestedComment","Tokenizer","constructor","cfg","rulesBeforeParams","buildRulesBeforeParams","rulesAfterParams","buildRulesAfterParams","tokenize","input","paramTypesOverrides","rules","buildParamRules","tokens","postProcess","validRules","type","BLOCK_COMMENT","nestedBlockComments","LINE_COMMENT","lineComment","lineCommentTypes","QUOTED_IDENTIFIER","string","identTypes","NUMBER","RESERVED_PHRASE","reservedWord","reservedPhrases","identChars","text","toCanonical","CASE","END","BETWEEN","LIMIT","reservedClauses","includes","undefined","RESERVED_CLAUSE","RESERVED_SELECT","reservedSelect","RESERVED_SET_OPERATION","reservedSetOperations","WHEN","ELSE","THEN","RESERVED_JOIN","reservedJoins","AND","OR","XOR","supportsXor","RESERVED_FUNCTION_NAME","reservedFunctionNames","RESERVED_KEYWORD","reservedKeywords","VARIABLE","variableTypes","variable","STRING","stringTypes","IDENTIFIER","identifier","DELIMITER","COMMA","OPEN_PAREN","parenthesis","extraParens","CLOSE_PAREN","OPERATOR","operator","operators","ASTERISK","DOT","paramTypes","named","quoted","numbered","positional","custom","NAMED_PARAMETER","parameter","identifierPattern","paramChars","key","v","slice","QUOTED_PARAMETER","stringPattern","tokenKey","quoteChar","replace","RegExp","NUMBERED_PARAMETER","POSITIONAL_PARAMETER","map","customParam","CUSTOM_PARAMETER","filter","rule","Boolean","toUpperCase"],"sources":["../../src/lexer/Tokenizer.ts"],"sourcesContent":["import { Token, TokenType } from './token.js';\nimport * as regex from './regexFactory.js';\nimport { ParamTypes, TokenizerOptions } from './TokenizerOptions.js';\nimport TokenizerEngine, { TokenRule } from './TokenizerEngine.js';\nimport { escapeRegExp, patternToRegex } from './regexUtil.js';\nimport { equalizeWhitespace, Optional } from '../utils.js';\nimport { NestedComment } from './NestedComment.js';\n\ntype OptionalTokenRule = Optional<TokenRule, 'regex'>;\n\nexport default class Tokenizer {\n  private rulesBeforeParams: TokenRule[];\n  private rulesAfterParams: TokenRule[];\n\n  constructor(private cfg: TokenizerOptions) {\n    this.rulesBeforeParams = this.buildRulesBeforeParams(cfg);\n    this.rulesAfterParams = this.buildRulesAfterParams(cfg);\n  }\n\n  public tokenize(input: string, paramTypesOverrides: ParamTypes): Token[] {\n    const rules = [\n      ...this.rulesBeforeParams,\n      ...this.buildParamRules(this.cfg, paramTypesOverrides),\n      ...this.rulesAfterParams,\n    ];\n    const tokens = new TokenizerEngine(rules).tokenize(input);\n    return this.cfg.postProcess ? this.cfg.postProcess(tokens) : tokens;\n  }\n\n  // These rules can be cached as they only depend on\n  // the Tokenizer config options specified for each SQL dialect\n  private buildRulesBeforeParams(cfg: TokenizerOptions): TokenRule[] {\n    return this.validRules([\n      {\n        type: TokenType.BLOCK_COMMENT,\n        regex: cfg.nestedBlockComments ? new NestedComment() : /(\\/\\*[^]*?\\*\\/)/uy,\n      },\n      {\n        type: TokenType.LINE_COMMENT,\n        regex: regex.lineComment(cfg.lineCommentTypes ?? ['--']),\n      },\n      {\n        type: TokenType.QUOTED_IDENTIFIER,\n        regex: regex.string(cfg.identTypes),\n      },\n      {\n        type: TokenType.NUMBER,\n        regex:\n          /(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\\s*)?[0-9]+(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+(?:\\.[0-9]+)?)?)(?!\\w)/uy,\n      },\n      // RESERVED_PHRASE is matched before all other keyword tokens\n      // to e.g. prioritize matching \"TIMESTAMP WITH TIME ZONE\" phrase over \"WITH\" clause.\n      {\n        type: TokenType.RESERVED_PHRASE,\n        regex: regex.reservedWord(cfg.reservedPhrases ?? [], cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.CASE,\n        regex: /CASE\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.END,\n        regex: /END\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.BETWEEN,\n        regex: /BETWEEN\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.LIMIT,\n        regex: cfg.reservedClauses.includes('LIMIT') ? /LIMIT\\b/iuy : undefined,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_CLAUSE,\n        regex: regex.reservedWord(cfg.reservedClauses, cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_SELECT,\n        regex: regex.reservedWord(cfg.reservedSelect, cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_SET_OPERATION,\n        regex: regex.reservedWord(cfg.reservedSetOperations, cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.WHEN,\n        regex: /WHEN\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.ELSE,\n        regex: /ELSE\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.THEN,\n        regex: /THEN\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_JOIN,\n        regex: regex.reservedWord(cfg.reservedJoins, cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.AND,\n        regex: /AND\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.OR,\n        regex: /OR\\b/iuy,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.XOR,\n        regex: cfg.supportsXor ? /XOR\\b/iuy : undefined,\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_FUNCTION_NAME,\n        regex: regex.reservedWord(cfg.reservedFunctionNames, cfg.identChars),\n        text: toCanonical,\n      },\n      {\n        type: TokenType.RESERVED_KEYWORD,\n        regex: regex.reservedWord(cfg.reservedKeywords, cfg.identChars),\n        text: toCanonical,\n      },\n    ]);\n  }\n\n  // These rules can also be cached as they only depend on\n  // the Tokenizer config options specified for each SQL dialect\n  private buildRulesAfterParams(cfg: TokenizerOptions): TokenRule[] {\n    return this.validRules([\n      {\n        type: TokenType.VARIABLE,\n        regex: cfg.variableTypes ? regex.variable(cfg.variableTypes) : undefined,\n      },\n      { type: TokenType.STRING, regex: regex.string(cfg.stringTypes) },\n      {\n        type: TokenType.IDENTIFIER,\n        regex: regex.identifier(cfg.identChars),\n      },\n      { type: TokenType.DELIMITER, regex: /[;]/uy },\n      { type: TokenType.COMMA, regex: /[,]/y },\n      {\n        type: TokenType.OPEN_PAREN,\n        regex: regex.parenthesis('open', cfg.extraParens),\n      },\n      {\n        type: TokenType.CLOSE_PAREN,\n        regex: regex.parenthesis('close', cfg.extraParens),\n      },\n      {\n        type: TokenType.OPERATOR,\n        regex: regex.operator([\n          // standard operators\n          '+',\n          '-',\n          '/',\n          '>',\n          '<',\n          '=',\n          '<>',\n          '<=',\n          '>=',\n          '!=',\n          ...(cfg.operators ?? []),\n        ]),\n      },\n      { type: TokenType.ASTERISK, regex: /[*]/uy },\n      { type: TokenType.DOT, regex: /[.]/uy },\n    ]);\n  }\n\n  // These rules can't be blindly cached as the paramTypesOverrides object\n  // can differ on each invocation of the format() function.\n  private buildParamRules(cfg: TokenizerOptions, paramTypesOverrides: ParamTypes): TokenRule[] {\n    // Each dialect has its own default parameter types (if any),\n    // but these can be overriden by the user of the library.\n    const paramTypes = {\n      named: paramTypesOverrides?.named || cfg.paramTypes?.named || [],\n      quoted: paramTypesOverrides?.quoted || cfg.paramTypes?.quoted || [],\n      numbered: paramTypesOverrides?.numbered || cfg.paramTypes?.numbered || [],\n      positional:\n        typeof paramTypesOverrides?.positional === 'boolean'\n          ? paramTypesOverrides.positional\n          : cfg.paramTypes?.positional,\n      custom: paramTypesOverrides?.custom || cfg.paramTypes?.custom || [],\n    };\n\n    return this.validRules([\n      {\n        type: TokenType.NAMED_PARAMETER,\n        regex: regex.parameter(\n          paramTypes.named,\n          regex.identifierPattern(cfg.paramChars || cfg.identChars)\n        ),\n        key: v => v.slice(1),\n      },\n      {\n        type: TokenType.QUOTED_PARAMETER,\n        regex: regex.parameter(paramTypes.quoted, regex.stringPattern(cfg.identTypes)),\n        key: v =>\n          (({ tokenKey, quoteChar }) =>\n            tokenKey.replace(new RegExp(escapeRegExp('\\\\' + quoteChar), 'gu'), quoteChar))({\n            tokenKey: v.slice(2, -1),\n            quoteChar: v.slice(-1),\n          }),\n      },\n      {\n        type: TokenType.NUMBERED_PARAMETER,\n        regex: regex.parameter(paramTypes.numbered, '[0-9]+'),\n        key: v => v.slice(1),\n      },\n      {\n        type: TokenType.POSITIONAL_PARAMETER,\n        regex: paramTypes.positional ? /[?]/y : undefined,\n      },\n      ...paramTypes.custom.map(\n        (customParam): TokenRule => ({\n          type: TokenType.CUSTOM_PARAMETER,\n          regex: patternToRegex(customParam.regex),\n          key: customParam.key ?? (v => v),\n        })\n      ),\n    ]);\n  }\n\n  // filters out rules for token types whose regex is undefined\n  private validRules(rules: OptionalTokenRule[]): TokenRule[] {\n    return rules.filter((rule): rule is TokenRule => Boolean(rule.regex));\n  }\n}\n\n/**\n * Converts keywords (and keyword sequences) to canonical form:\n * - in uppercase\n * - single spaces between words\n */\nconst toCanonical = (v: string) => equalizeWhitespace(v.toUpperCase());\n"],"mappings":"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"}