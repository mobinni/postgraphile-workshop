{"version":3,"file":"Indentation.js","names":["last","INDENT_TYPE_TOP_LEVEL","INDENT_TYPE_BLOCK_LEVEL","Indentation","indentTypes","constructor","indent","getSingleIndent","getLevel","length","increaseTopLevel","push","increaseBlockLevel","decreaseTopLevel","pop","decreaseBlockLevel","type"],"sources":["../../src/formatter/Indentation.ts"],"sourcesContent":["import { last } from '../utils.js';\n\nconst INDENT_TYPE_TOP_LEVEL = 'top-level';\nconst INDENT_TYPE_BLOCK_LEVEL = 'block-level';\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_CLAUSE words\n */\nexport default class Indentation {\n  private indentTypes: string[] = [];\n\n  /**\n   * @param {string} indent A string to indent with\n   */\n  constructor(private indent: string) {}\n\n  /**\n   * Returns indentation string for single indentation step.\n   */\n  getSingleIndent(): string {\n    return this.indent;\n  }\n\n  /**\n   * Returns current indentation level\n   */\n  getLevel(): number {\n    return this.indentTypes.length;\n  }\n\n  /**\n   * Increases indentation by one top-level indent.\n   */\n  increaseTopLevel() {\n    this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n  }\n\n  /**\n   * Increases indentation by one block-level indent.\n   */\n  increaseBlockLevel() {\n    this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n  }\n\n  /**\n   * Decreases indentation by one top-level indent.\n   * Does nothing when the previous indent is not top-level.\n   */\n  decreaseTopLevel() {\n    if (this.indentTypes.length > 0 && last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n      this.indentTypes.pop();\n    }\n  }\n\n  /**\n   * Decreases indentation by one block-level indent.\n   * If there are top-level indents within the block-level indent,\n   * throws away these as well.\n   */\n  decreaseBlockLevel() {\n    while (this.indentTypes.length > 0) {\n      const type = this.indentTypes.pop();\n      if (type !== INDENT_TYPE_TOP_LEVEL) {\n        break;\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAT,QAAqB,aAArB;AAEA,MAAMC,qBAAqB,GAAG,WAA9B;AACA,MAAMC,uBAAuB,GAAG,aAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,CAAkB;EACvBC,WAAW,GAAa,EAAb;EAEnB;AACF;AACA;;EACEC,WAAW,CAASC,MAAT,EAAyB;IAAA,KAAhBA,MAAgB,GAAhBA,MAAgB;EAAE;EAEtC;AACF;AACA;;;EACEC,eAAe,GAAW;IACxB,OAAO,KAAKD,MAAZ;EACD;EAED;AACF;AACA;;;EACEE,QAAQ,GAAW;IACjB,OAAO,KAAKJ,WAAL,CAAiBK,MAAxB;EACD;EAED;AACF;AACA;;;EACEC,gBAAgB,GAAG;IACjB,KAAKN,WAAL,CAAiBO,IAAjB,CAAsBV,qBAAtB;EACD;EAED;AACF;AACA;;;EACEW,kBAAkB,GAAG;IACnB,KAAKR,WAAL,CAAiBO,IAAjB,CAAsBT,uBAAtB;EACD;EAED;AACF;AACA;AACA;;;EACEW,gBAAgB,GAAG;IACjB,IAAI,KAAKT,WAAL,CAAiBK,MAAjB,GAA0B,CAA1B,IAA+BT,IAAI,CAAC,KAAKI,WAAN,CAAJ,KAA2BH,qBAA9D,EAAqF;MACnF,KAAKG,WAAL,CAAiBU,GAAjB;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEC,kBAAkB,GAAG;IACnB,OAAO,KAAKX,WAAL,CAAiBK,MAAjB,GAA0B,CAAjC,EAAoC;MAClC,MAAMO,IAAI,GAAG,KAAKZ,WAAL,CAAiBU,GAAjB,EAAb;;MACA,IAAIE,IAAI,KAAKf,qBAAb,EAAoC;QAClC;MACD;IACF;EACF;;AA1D8B"}