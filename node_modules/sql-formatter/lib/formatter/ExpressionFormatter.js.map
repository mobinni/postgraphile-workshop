{"version":3,"file":"ExpressionFormatter.js","names":["equalizeWhitespace","isMultiline","last","isTabularStyle","TokenType","NodeType","WS","toTabularFormat","isTabularToken","InlineLayout","InlineLayoutError","ExpressionFormatter","inline","nodes","index","constructor","cfg","dialectCfg","params","layout","format","length","formatNode","node","formatComments","leadingComments","formatNodeWithoutComments","trailingComments","type","function_call","formatFunctionCall","array_subscript","formatArraySubscript","property_access","formatPropertyAccess","parenthesis","formatParenthesis","between_predicate","formatBetweenPredicate","case_expression","formatCaseExpression","case_when","formatCaseWhen","case_else","formatCaseElse","clause","formatClause","set_operation","formatSetOperation","limit_clause","formatLimitClause","all_columns_asterisk","formatAllColumnsAsterisk","literal","formatLiteral","identifier","formatIdentifier","parameter","formatParameter","operator","formatOperator","comma","formatComma","line_comment","formatLineComment","block_comment","formatBlockComment","keyword","formatKeywordNode","withComments","nameKw","add","showKw","array","text","object","NO_SPACE","property","inlineLayout","formatInlineExpression","children","openParen","getLayoutItems","closeParen","SPACE","NEWLINE","INDENT","formatSubExpression","indentation","increaseBlockLevel","decreaseBlockLevel","betweenKw","expr1","showNonTabularKw","andKw","expr2","caseKw","expr","clauses","endKw","whenKw","condition","thenKw","result","elseKw","isOnelineClause","formatClauseInOnelineStyle","formatClauseInTabularStyle","formatClauseInIndentedStyle","onelineClauses","increaseTopLevel","decreaseTopLevel","limitKw","offset","count","_node","get","denseOperators","alwaysDenseOperators","includes","fn","comments","forEach","com","precedingWhitespace","MANDATORY_NEWLINE","NO_NEWLINE","isMultilineBlockComment","splitBlockComment","line","isDocComment","comment","lines","split","test","slice","every","map","replace","oldParamIndex","getPositionalParameterIndex","expressionWidth","e","setPositionalParameterIndex","undefined","tokenType","RESERVED_JOIN","formatJoin","AND","OR","XOR","formatLogicalOperator","formatKeyword","logicalOperatorNewline","indentStyle","keywordCase","raw","toLowerCase"],"sources":["../../src/formatter/ExpressionFormatter.ts"],"sourcesContent":["import { FormatOptions } from '../FormatOptions.js';\nimport { equalizeWhitespace, isMultiline, last } from '../utils.js';\n\nimport Params from './Params.js';\nimport { isTabularStyle } from './config.js';\nimport { TokenType } from '../lexer/token.js';\nimport {\n  AllColumnsAsteriskNode,\n  ArraySubscriptNode,\n  AstNode,\n  BetweenPredicateNode,\n  SetOperationNode,\n  ClauseNode,\n  FunctionCallNode,\n  LimitClauseNode,\n  NodeType,\n  ParenthesisNode,\n  LiteralNode,\n  IdentifierNode,\n  ParameterNode,\n  OperatorNode,\n  LineCommentNode,\n  BlockCommentNode,\n  CommaNode,\n  KeywordNode,\n  PropertyAccessNode,\n  CommentNode,\n  CaseExpressionNode,\n  CaseWhenNode,\n  CaseElseNode,\n} from '../parser/ast.js';\n\nimport Layout, { WS } from './Layout.js';\nimport toTabularFormat, { isTabularToken } from './tabularStyle.js';\nimport InlineLayout, { InlineLayoutError } from './InlineLayout.js';\n\ninterface ExpressionFormatterParams {\n  cfg: FormatOptions;\n  dialectCfg: ProcessedDialectFormatOptions;\n  params: Params;\n  layout: Layout;\n  inline?: boolean;\n}\n\nexport interface DialectFormatOptions {\n  // List of operators that should always be formatted without surrounding spaces\n  alwaysDenseOperators?: string[];\n  // List of clauses that should be formatted on a single line\n  onelineClauses: string[];\n}\n\n// Contains the same data as DialectFormatOptions,\n// but optimized for faster and more conventient lookup.\nexport interface ProcessedDialectFormatOptions {\n  alwaysDenseOperators: string[];\n  onelineClauses: Record<string, boolean>;\n}\n\n/** Formats a generic SQL expression */\nexport default class ExpressionFormatter {\n  private cfg: FormatOptions;\n  private dialectCfg: ProcessedDialectFormatOptions;\n  private params: Params;\n  private layout: Layout;\n\n  private inline = false;\n  private nodes: AstNode[] = [];\n  private index = -1;\n\n  constructor({ cfg, dialectCfg, params, layout, inline = false }: ExpressionFormatterParams) {\n    this.cfg = cfg;\n    this.dialectCfg = dialectCfg;\n    this.inline = inline;\n    this.params = params;\n    this.layout = layout;\n  }\n\n  public format(nodes: AstNode[]): Layout {\n    this.nodes = nodes;\n\n    for (this.index = 0; this.index < this.nodes.length; this.index++) {\n      this.formatNode(this.nodes[this.index]);\n    }\n    return this.layout;\n  }\n\n  private formatNode(node: AstNode) {\n    this.formatComments(node.leadingComments);\n    this.formatNodeWithoutComments(node);\n    this.formatComments(node.trailingComments);\n  }\n\n  private formatNodeWithoutComments(node: AstNode) {\n    switch (node.type) {\n      case NodeType.function_call:\n        return this.formatFunctionCall(node);\n      case NodeType.array_subscript:\n        return this.formatArraySubscript(node);\n      case NodeType.property_access:\n        return this.formatPropertyAccess(node);\n      case NodeType.parenthesis:\n        return this.formatParenthesis(node);\n      case NodeType.between_predicate:\n        return this.formatBetweenPredicate(node);\n      case NodeType.case_expression:\n        return this.formatCaseExpression(node);\n      case NodeType.case_when:\n        return this.formatCaseWhen(node);\n      case NodeType.case_else:\n        return this.formatCaseElse(node);\n      case NodeType.clause:\n        return this.formatClause(node);\n      case NodeType.set_operation:\n        return this.formatSetOperation(node);\n      case NodeType.limit_clause:\n        return this.formatLimitClause(node);\n      case NodeType.all_columns_asterisk:\n        return this.formatAllColumnsAsterisk(node);\n      case NodeType.literal:\n        return this.formatLiteral(node);\n      case NodeType.identifier:\n        return this.formatIdentifier(node);\n      case NodeType.parameter:\n        return this.formatParameter(node);\n      case NodeType.operator:\n        return this.formatOperator(node);\n      case NodeType.comma:\n        return this.formatComma(node);\n      case NodeType.line_comment:\n        return this.formatLineComment(node);\n      case NodeType.block_comment:\n        return this.formatBlockComment(node);\n      case NodeType.keyword:\n        return this.formatKeywordNode(node);\n    }\n  }\n\n  private formatFunctionCall(node: FunctionCallNode) {\n    this.withComments(node.nameKw, () => {\n      this.layout.add(this.showKw(node.nameKw));\n    });\n    this.formatNode(node.parenthesis);\n  }\n\n  private formatArraySubscript(node: ArraySubscriptNode) {\n    this.withComments(node.array, () => {\n      this.layout.add(\n        node.array.type === NodeType.keyword ? this.showKw(node.array) : node.array.text\n      );\n    });\n    this.formatNode(node.parenthesis);\n  }\n\n  private formatPropertyAccess(node: PropertyAccessNode) {\n    this.formatNode(node.object);\n    this.layout.add(WS.NO_SPACE, '.');\n    this.formatNode(node.property);\n  }\n\n  private formatParenthesis(node: ParenthesisNode) {\n    const inlineLayout = this.formatInlineExpression(node.children);\n\n    if (inlineLayout) {\n      this.layout.add(node.openParen);\n      this.layout.add(...inlineLayout.getLayoutItems());\n      this.layout.add(WS.NO_SPACE, node.closeParen, WS.SPACE);\n    } else {\n      this.layout.add(node.openParen, WS.NEWLINE);\n\n      if (isTabularStyle(this.cfg)) {\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children);\n      } else {\n        this.layout.indentation.increaseBlockLevel();\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children);\n        this.layout.indentation.decreaseBlockLevel();\n      }\n\n      this.layout.add(WS.NEWLINE, WS.INDENT, node.closeParen, WS.SPACE);\n    }\n  }\n\n  private formatBetweenPredicate(node: BetweenPredicateNode) {\n    this.layout.add(this.showKw(node.betweenKw), WS.SPACE);\n    this.layout = this.formatSubExpression(node.expr1);\n    this.layout.add(WS.NO_SPACE, WS.SPACE, this.showNonTabularKw(node.andKw), WS.SPACE);\n    this.layout = this.formatSubExpression(node.expr2);\n    this.layout.add(WS.SPACE);\n  }\n\n  private formatCaseExpression(node: CaseExpressionNode) {\n    this.formatNode(node.caseKw);\n\n    this.layout.indentation.increaseBlockLevel();\n    this.layout = this.formatSubExpression(node.expr);\n    this.layout = this.formatSubExpression(node.clauses);\n    this.layout.indentation.decreaseBlockLevel();\n\n    this.layout.add(WS.NEWLINE, WS.INDENT);\n    this.formatNode(node.endKw);\n  }\n\n  private formatCaseWhen(node: CaseWhenNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT);\n    this.formatNode(node.whenKw);\n    this.layout = this.formatSubExpression(node.condition);\n    this.formatNode(node.thenKw);\n    this.layout = this.formatSubExpression(node.result);\n  }\n\n  private formatCaseElse(node: CaseElseNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT);\n    this.formatNode(node.elseKw);\n    this.layout = this.formatSubExpression(node.result);\n  }\n\n  private formatClause(node: ClauseNode) {\n    if (this.isOnelineClause(node)) {\n      this.formatClauseInOnelineStyle(node);\n    } else if (isTabularStyle(this.cfg)) {\n      this.formatClauseInTabularStyle(node);\n    } else {\n      this.formatClauseInIndentedStyle(node);\n    }\n  }\n\n  private isOnelineClause(node: ClauseNode): boolean {\n    return this.dialectCfg.onelineClauses[node.nameKw.text];\n  }\n\n  private formatClauseInIndentedStyle(node: ClauseNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.nameKw), WS.NEWLINE);\n    this.layout.indentation.increaseTopLevel();\n    this.layout.add(WS.INDENT);\n    this.layout = this.formatSubExpression(node.children);\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatClauseInOnelineStyle(node: ClauseNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.nameKw), WS.SPACE);\n    this.layout = this.formatSubExpression(node.children);\n  }\n\n  private formatClauseInTabularStyle(node: ClauseNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.nameKw), WS.SPACE);\n    this.layout.indentation.increaseTopLevel();\n    this.layout = this.formatSubExpression(node.children);\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatSetOperation(node: SetOperationNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.nameKw), WS.NEWLINE);\n    this.layout.add(WS.INDENT);\n    this.layout = this.formatSubExpression(node.children);\n  }\n\n  private formatLimitClause(node: LimitClauseNode) {\n    this.withComments(node.limitKw, () => {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.limitKw));\n    });\n    this.layout.indentation.increaseTopLevel();\n\n    if (isTabularStyle(this.cfg)) {\n      this.layout.add(WS.SPACE);\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT);\n    }\n\n    if (node.offset) {\n      this.layout = this.formatSubExpression(node.offset);\n      this.layout.add(WS.NO_SPACE, ',', WS.SPACE);\n      this.layout = this.formatSubExpression(node.count);\n    } else {\n      this.layout = this.formatSubExpression(node.count);\n    }\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatAllColumnsAsterisk(_node: AllColumnsAsteriskNode) {\n    this.layout.add('*', WS.SPACE);\n  }\n\n  private formatLiteral(node: LiteralNode) {\n    this.layout.add(node.text, WS.SPACE);\n  }\n\n  private formatIdentifier(node: IdentifierNode) {\n    this.layout.add(node.text, WS.SPACE);\n  }\n\n  private formatParameter(node: ParameterNode) {\n    this.layout.add(this.params.get(node), WS.SPACE);\n  }\n\n  private formatOperator({ text }: OperatorNode) {\n    if (this.cfg.denseOperators || this.dialectCfg.alwaysDenseOperators.includes(text)) {\n      this.layout.add(WS.NO_SPACE, text);\n    } else if (text === ':') {\n      this.layout.add(WS.NO_SPACE, text, WS.SPACE);\n    } else {\n      this.layout.add(text, WS.SPACE);\n    }\n  }\n\n  private formatComma(_node: CommaNode) {\n    if (!this.inline) {\n      this.layout.add(WS.NO_SPACE, ',', WS.NEWLINE, WS.INDENT);\n    } else {\n      this.layout.add(WS.NO_SPACE, ',', WS.SPACE);\n    }\n  }\n\n  private withComments(node: AstNode, fn: () => void) {\n    this.formatComments(node.leadingComments);\n    fn();\n    this.formatComments(node.trailingComments);\n  }\n\n  private formatComments(comments: CommentNode[] | undefined) {\n    if (!comments) {\n      return;\n    }\n    comments.forEach(com => {\n      if (com.type === NodeType.line_comment) {\n        this.formatLineComment(com);\n      } else {\n        this.formatBlockComment(com);\n      }\n    });\n  }\n\n  private formatLineComment(node: LineCommentNode) {\n    if (isMultiline(node.precedingWhitespace || '')) {\n      this.layout.add(WS.NEWLINE, WS.INDENT, node.text, WS.MANDATORY_NEWLINE, WS.INDENT);\n    } else if (this.layout.getLayoutItems().length > 0) {\n      this.layout.add(WS.NO_NEWLINE, WS.SPACE, node.text, WS.MANDATORY_NEWLINE, WS.INDENT);\n    } else {\n      // comment is the first item in code - no need to add preceding spaces\n      this.layout.add(node.text, WS.MANDATORY_NEWLINE, WS.INDENT);\n    }\n  }\n\n  private formatBlockComment(node: BlockCommentNode) {\n    if (this.isMultilineBlockComment(node)) {\n      this.splitBlockComment(node.text).forEach(line => {\n        this.layout.add(WS.NEWLINE, WS.INDENT, line);\n      });\n      this.layout.add(WS.NEWLINE, WS.INDENT);\n    } else {\n      this.layout.add(node.text, WS.SPACE);\n    }\n  }\n\n  private isMultilineBlockComment(node: BlockCommentNode): boolean {\n    return isMultiline(node.text) || isMultiline(node.precedingWhitespace || '');\n  }\n\n  private isDocComment(comment: string): boolean {\n    const lines = comment.split(/\\n/);\n    return (\n      // first line starts with /* or /**\n      /^\\/\\*\\*?$/.test(lines[0]) &&\n      // intermediate lines start with *\n      lines.slice(1, lines.length - 1).every(line => /^\\s*\\*/.test(line)) &&\n      // last line ends with */\n      /^\\s*\\*\\/$/.test(last(lines) as string)\n    );\n  }\n\n  // Breaks up block comment to multiple lines.\n  // For example this doc-comment (dots representing leading whitespace):\n  //\n  //   ..../**\n  //   .....* Some description here\n  //   .....* and here too\n  //   .....*/\n  //\n  // gets broken to this array (note the leading single spaces):\n  //\n  //   [ '/**',\n  //     '.* Some description here',\n  //     '.* and here too',\n  //     '.*/' ]\n  //\n  // However, a normal comment (non-doc-comment) like this:\n  //\n  //   ..../*\n  //   ....Some description here\n  //   ....*/\n  //\n  // gets broken to this array (no leading spaces):\n  //\n  //   [ '/*',\n  //     'Some description here',\n  //     '*/' ]\n  //\n  private splitBlockComment(comment: string): string[] {\n    if (this.isDocComment(comment)) {\n      return comment.split(/\\n/).map(line => {\n        if (/^\\s*\\*/.test(line)) {\n          return ' ' + line.replace(/^\\s*/, '');\n        } else {\n          return line;\n        }\n      });\n    } else {\n      return comment.split(/\\n/).map(line => line.replace(/^\\s*/, ''));\n    }\n  }\n\n  private formatSubExpression(nodes: AstNode[]): Layout {\n    return new ExpressionFormatter({\n      cfg: this.cfg,\n      dialectCfg: this.dialectCfg,\n      params: this.params,\n      layout: this.layout,\n      inline: this.inline,\n    }).format(nodes);\n  }\n\n  private formatInlineExpression(nodes: AstNode[]): Layout | undefined {\n    const oldParamIndex = this.params.getPositionalParameterIndex();\n    try {\n      return new ExpressionFormatter({\n        cfg: this.cfg,\n        dialectCfg: this.dialectCfg,\n        params: this.params,\n        layout: new InlineLayout(this.cfg.expressionWidth),\n        inline: true,\n      }).format(nodes);\n    } catch (e) {\n      if (e instanceof InlineLayoutError) {\n        // While formatting, some of the positional parameters might have\n        // been consumed, which increased the current parameter index.\n        // We reset the index to an earlier state, so we can run the\n        // formatting again and re-consume these parameters in non-inline mode.\n        this.params.setPositionalParameterIndex(oldParamIndex);\n        return undefined;\n      } else {\n        // forward all unexpected errors\n        throw e;\n      }\n    }\n  }\n\n  private formatKeywordNode(node: KeywordNode): void {\n    switch (node.tokenType) {\n      case TokenType.RESERVED_JOIN:\n        return this.formatJoin(node);\n      case TokenType.AND:\n      case TokenType.OR:\n      case TokenType.XOR:\n        return this.formatLogicalOperator(node);\n      default:\n        return this.formatKeyword(node);\n    }\n  }\n\n  private formatJoin(node: KeywordNode) {\n    if (isTabularStyle(this.cfg)) {\n      // in tabular style JOINs are at the same level as clauses\n      this.layout.indentation.decreaseTopLevel();\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n      this.layout.indentation.increaseTopLevel();\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n    }\n  }\n\n  private formatKeyword(node: KeywordNode) {\n    this.layout.add(this.showKw(node), WS.SPACE);\n  }\n\n  private formatLogicalOperator(node: KeywordNode) {\n    if (this.cfg.logicalOperatorNewline === 'before') {\n      if (isTabularStyle(this.cfg)) {\n        // In tabular style AND/OR is placed on the same level as clauses\n        this.layout.indentation.decreaseTopLevel();\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n        this.layout.indentation.increaseTopLevel();\n      } else {\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n      }\n    } else {\n      this.layout.add(this.showKw(node), WS.NEWLINE, WS.INDENT);\n    }\n  }\n\n  private showKw(node: KeywordNode): string {\n    if (isTabularToken(node.tokenType)) {\n      return toTabularFormat(this.showNonTabularKw(node), this.cfg.indentStyle);\n    } else {\n      return this.showNonTabularKw(node);\n    }\n  }\n\n  // Like showKw(), but skips tabular formatting\n  private showNonTabularKw(node: KeywordNode): string {\n    switch (this.cfg.keywordCase) {\n      case 'preserve':\n        return equalizeWhitespace(node.raw);\n      case 'upper':\n        return node.text;\n      case 'lower':\n        return node.text.toLowerCase();\n    }\n  }\n}\n"],"mappings":"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"}