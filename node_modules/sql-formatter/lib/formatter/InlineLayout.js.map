{"version":3,"file":"InlineLayout.js","names":["Indentation","Layout","WS","InlineLayout","length","trailingSpace","constructor","expressionWidth","add","items","forEach","item","addToLength","InlineLayoutError","MANDATORY_NEWLINE","NEWLINE","INDENT","SINGLE_INDENT","SPACE","NO_NEWLINE","NO_SPACE","Error"],"sources":["../../src/formatter/InlineLayout.ts"],"sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport Indentation from './Indentation.js';\nimport Layout, { WS } from './Layout.js';\n\n/**\n * Like Layout, but only formats single-line expressions.\n *\n * Throws InlineLayoutError:\n * - when encountering a newline\n * - when exceeding configured expressionWidth\n */\nexport default class InlineLayout extends Layout {\n  private length = 0;\n  // Keeps track of the trailing whitespace,\n  // so that we can decrease length when encountering WS.NO_SPACE,\n  // but only when there actually is a space to remove.\n  private trailingSpace = false;\n\n  constructor(private expressionWidth: number) {\n    super(new Indentation('')); // no indentation in inline layout\n  }\n\n  public add(...items: (WS | string)[]) {\n    items.forEach(item => this.addToLength(item));\n    if (this.length > this.expressionWidth) {\n      // We have exceeded the allowable width\n      throw new InlineLayoutError();\n    }\n    super.add(...items);\n  }\n\n  private addToLength(item: WS | string) {\n    if (typeof item === 'string') {\n      this.length += item.length;\n      this.trailingSpace = false;\n    } else if (item === WS.MANDATORY_NEWLINE || item === WS.NEWLINE) {\n      // newlines not allowed within inline block\n      throw new InlineLayoutError();\n    } else if (item === WS.INDENT || item === WS.SINGLE_INDENT || item === WS.SPACE) {\n      if (!this.trailingSpace) {\n        this.length++;\n        this.trailingSpace = true;\n      }\n    } else if (item === WS.NO_NEWLINE || item === WS.NO_SPACE) {\n      if (this.trailingSpace) {\n        this.trailingSpace = false;\n        this.length--;\n      }\n    }\n  }\n}\n\n/**\n * Thrown when block of SQL can't be formatted as a single line.\n */\nexport class InlineLayoutError extends Error {}\n"],"mappings":"AAAA;AACA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAOC,MAAP,IAAiBC,EAAjB,QAA2B,aAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,SAA2BF,MAA3B,CAAkC;EACvCG,MAAM,GAAG,CAAH,CADiC,CAE/C;EACA;EACA;;EACQC,aAAa,GAAG,KAAH;;EAErBC,WAAW,CAASC,eAAT,EAAkC;IAC3C,MAAM,IAAIP,WAAJ,CAAgB,EAAhB,CAAN,EAD2C,CACf;;IADe,KAAzBO,eAAyB,GAAzBA,eAAyB;EAE5C;;EAEMC,GAAG,CAAC,GAAGC,KAAJ,EAA4B;IACpCA,KAAK,CAACC,OAAN,CAAcC,IAAI,IAAI,KAAKC,WAAL,CAAiBD,IAAjB,CAAtB;;IACA,IAAI,KAAKP,MAAL,GAAc,KAAKG,eAAvB,EAAwC;MACtC;MACA,MAAM,IAAIM,iBAAJ,EAAN;IACD;;IACD,MAAML,GAAN,CAAU,GAAGC,KAAb;EACD;;EAEOG,WAAW,CAACD,IAAD,EAAoB;IACrC,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;MAC5B,KAAKP,MAAL,IAAeO,IAAI,CAACP,MAApB;MACA,KAAKC,aAAL,GAAqB,KAArB;IACD,CAHD,MAGO,IAAIM,IAAI,KAAKT,EAAE,CAACY,iBAAZ,IAAiCH,IAAI,KAAKT,EAAE,CAACa,OAAjD,EAA0D;MAC/D;MACA,MAAM,IAAIF,iBAAJ,EAAN;IACD,CAHM,MAGA,IAAIF,IAAI,KAAKT,EAAE,CAACc,MAAZ,IAAsBL,IAAI,KAAKT,EAAE,CAACe,aAAlC,IAAmDN,IAAI,KAAKT,EAAE,CAACgB,KAAnE,EAA0E;MAC/E,IAAI,CAAC,KAAKb,aAAV,EAAyB;QACvB,KAAKD,MAAL;QACA,KAAKC,aAAL,GAAqB,IAArB;MACD;IACF,CALM,MAKA,IAAIM,IAAI,KAAKT,EAAE,CAACiB,UAAZ,IAA0BR,IAAI,KAAKT,EAAE,CAACkB,QAA1C,EAAoD;MACzD,IAAI,KAAKf,aAAT,EAAwB;QACtB,KAAKA,aAAL,GAAqB,KAArB;QACA,KAAKD,MAAL;MACD;IACF;EACF;;AAtC8C;AAyCjD;AACA;AACA;;AACA,OAAO,MAAMS,iBAAN,SAAgCQ,KAAhC,CAAsC"}