{"version":3,"file":"Formatter.js","names":["indentString","Params","createParser","formatCommaPositions","formatAliasPositions","ExpressionFormatter","Layout","WS","Indentation","Formatter","constructor","dialect","cfg","params","format","query","ast","parse","formattedQuery","formatAst","finalQuery","postFormat","trimEnd","tokenizer","paramTypes","statements","map","stat","formatStatement","join","repeat","linesBetweenQueries","statement","layout","dialectCfg","formatOptions","children","hasSemicolon","newlineBeforeSemicolon","add","NEWLINE","NO_NEWLINE","toString","tabulateAlias","commaPosition"],"sources":["../../src/formatter/Formatter.ts"],"sourcesContent":["import { FormatOptions } from '../FormatOptions.js';\nimport { indentString } from './config.js';\nimport Params from './Params.js';\n\nimport { createParser } from '../parser/createParser.js';\nimport { StatementNode } from '../parser/ast.js';\nimport { Dialect } from '../dialect.js';\n\nimport formatCommaPositions from './formatCommaPositions.js';\nimport formatAliasPositions from './formatAliasPositions.js';\nimport ExpressionFormatter from './ExpressionFormatter.js';\nimport Layout, { WS } from './Layout.js';\nimport Indentation from './Indentation.js';\n\n/** Main formatter class that produces a final output string from list of tokens */\nexport default class Formatter {\n  private dialect: Dialect;\n  private cfg: FormatOptions;\n  private params: Params;\n\n  constructor(dialect: Dialect, cfg: FormatOptions) {\n    this.dialect = dialect;\n    this.cfg = cfg;\n    this.params = new Params(this.cfg.params);\n  }\n\n  /**\n   * Formats an SQL query.\n   * @param {string} query - The SQL query string to be formatted\n   * @return {string} The formatter query\n   */\n  public format(query: string): string {\n    const ast = this.parse(query);\n    const formattedQuery = this.formatAst(ast);\n    const finalQuery = this.postFormat(formattedQuery);\n\n    return finalQuery.trimEnd();\n  }\n\n  private parse(query: string): StatementNode[] {\n    return createParser(this.dialect.tokenizer).parse(query, this.cfg.paramTypes || {});\n  }\n\n  private formatAst(statements: StatementNode[]): string {\n    return statements\n      .map(stat => this.formatStatement(stat))\n      .join('\\n'.repeat(this.cfg.linesBetweenQueries + 1));\n  }\n\n  private formatStatement(statement: StatementNode): string {\n    const layout = new ExpressionFormatter({\n      cfg: this.cfg,\n      dialectCfg: this.dialect.formatOptions,\n      params: this.params,\n      layout: new Layout(new Indentation(indentString(this.cfg))),\n    }).format(statement.children);\n\n    if (!statement.hasSemicolon) {\n      // do nothing\n    } else if (this.cfg.newlineBeforeSemicolon) {\n      layout.add(WS.NEWLINE, ';');\n    } else {\n      layout.add(WS.NO_NEWLINE, ';');\n    }\n    return layout.toString();\n  }\n\n  private postFormat(query: string): string {\n    if (this.cfg.tabulateAlias) {\n      query = formatAliasPositions(query);\n    }\n    if (this.cfg.commaPosition === 'before' || this.cfg.commaPosition === 'tabular') {\n      query = formatCommaPositions(query, this.cfg.commaPosition, indentString(this.cfg));\n    }\n\n    return query;\n  }\n}\n"],"mappings":"AACA,SAASA,YAAT,QAA6B,aAA7B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,YAAT,QAA6B,2BAA7B;AAIA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,MAAP,IAAiBC,EAAjB,QAA2B,aAA3B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AAEA;;AACA,eAAe,MAAMC,SAAN,CAAgB;EAK7BC,WAAW,CAACC,OAAD,EAAmBC,GAAnB,EAAuC;IAChD,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKC,GAAL,GAAWA,GAAX;IACA,KAAKC,MAAL,GAAc,IAAIZ,MAAJ,CAAW,KAAKW,GAAL,CAASC,MAApB,CAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACSC,MAAM,CAACC,KAAD,EAAwB;IACnC,MAAMC,GAAG,GAAG,KAAKC,KAAL,CAAWF,KAAX,CAAZ;IACA,MAAMG,cAAc,GAAG,KAAKC,SAAL,CAAeH,GAAf,CAAvB;IACA,MAAMI,UAAU,GAAG,KAAKC,UAAL,CAAgBH,cAAhB,CAAnB;IAEA,OAAOE,UAAU,CAACE,OAAX,EAAP;EACD;;EAEOL,KAAK,CAACF,KAAD,EAAiC;IAC5C,OAAOb,YAAY,CAAC,KAAKS,OAAL,CAAaY,SAAd,CAAZ,CAAqCN,KAArC,CAA2CF,KAA3C,EAAkD,KAAKH,GAAL,CAASY,UAAT,IAAuB,EAAzE,CAAP;EACD;;EAEOL,SAAS,CAACM,UAAD,EAAsC;IACrD,OAAOA,UAAU,CACdC,GADI,CACAC,IAAI,IAAI,KAAKC,eAAL,CAAqBD,IAArB,CADR,EAEJE,IAFI,CAEC,KAAKC,MAAL,CAAY,KAAKlB,GAAL,CAASmB,mBAAT,GAA+B,CAA3C,CAFD,CAAP;EAGD;;EAEOH,eAAe,CAACI,SAAD,EAAmC;IACxD,MAAMC,MAAM,GAAG,IAAI5B,mBAAJ,CAAwB;MACrCO,GAAG,EAAE,KAAKA,GAD2B;MAErCsB,UAAU,EAAE,KAAKvB,OAAL,CAAawB,aAFY;MAGrCtB,MAAM,EAAE,KAAKA,MAHwB;MAIrCoB,MAAM,EAAE,IAAI3B,MAAJ,CAAW,IAAIE,WAAJ,CAAgBR,YAAY,CAAC,KAAKY,GAAN,CAA5B,CAAX;IAJ6B,CAAxB,EAKZE,MALY,CAKLkB,SAAS,CAACI,QALL,CAAf;;IAOA,IAAI,CAACJ,SAAS,CAACK,YAAf,EAA6B,CAC3B;IACD,CAFD,MAEO,IAAI,KAAKzB,GAAL,CAAS0B,sBAAb,EAAqC;MAC1CL,MAAM,CAACM,GAAP,CAAWhC,EAAE,CAACiC,OAAd,EAAuB,GAAvB;IACD,CAFM,MAEA;MACLP,MAAM,CAACM,GAAP,CAAWhC,EAAE,CAACkC,UAAd,EAA0B,GAA1B;IACD;;IACD,OAAOR,MAAM,CAACS,QAAP,EAAP;EACD;;EAEOrB,UAAU,CAACN,KAAD,EAAwB;IACxC,IAAI,KAAKH,GAAL,CAAS+B,aAAb,EAA4B;MAC1B5B,KAAK,GAAGX,oBAAoB,CAACW,KAAD,CAA5B;IACD;;IACD,IAAI,KAAKH,GAAL,CAASgC,aAAT,KAA2B,QAA3B,IAAuC,KAAKhC,GAAL,CAASgC,aAAT,KAA2B,SAAtE,EAAiF;MAC/E7B,KAAK,GAAGZ,oBAAoB,CAACY,KAAD,EAAQ,KAAKH,GAAL,CAASgC,aAAjB,EAAgC5C,YAAY,CAAC,KAAKY,GAAN,CAA5C,CAA5B;IACD;;IAED,OAAOG,KAAP;EACD;;AA7D4B"}