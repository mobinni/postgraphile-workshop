const { Buffer } = require('node:buffer');
const { scryptSync, createDecipheriv } = require('node:crypto');
const pkgName = "@dataplan/pg";
const pkgVersion = "0.0.1-alpha.10";

const RESET = '\x1b[0m';
const BOLD_BLACK_ON_RED = '\x1b[40;31;1;7m';
const RED = '\x1b[31m';
const BOLD = '\x1b[1m';
const BOLD_BLUE = '\x1b[34;1m';
const BOLD_BLUE_UNDERLINED = '\x1b[34;1;4m';

const iSponsorGraphile = `${RESET}${BOLD_BLUE}I_SPONSOR_GRAPHILE${RESET}${RED}`;
const website = `${RESET}${BOLD_BLUE_UNDERLINED}https://grafast.org${RESET}`;
const errorPrefix = `${BOLD_BLACK_ON_RED}[  ERROR  ]${RESET} ${RED}`;
const errorSuffix = `${RESET}
${BOLD_BLACK_ON_RED}[ CONTEXT ]${RESET} ${RED}You are attempting to run pre-release software that is only available to Graphile sponsors.${RESET}

Please refer to the ${website} documentation for the right code to use with this version '${BOLD}${pkgName}@${pkgVersion}${RESET}'.${RESET}
`;

const password = process.env.I_SPONSOR_GRAPHILE;
if (typeof password !== 'string') {
  console.error(
    `${errorPrefix}You must set the ${iSponsorGraphile} environmental variable to the shared secret to use this pre-release software.${errorSuffix}`,
  );
  process.exit(42);
}

const algorithm = "aes-192-cbc";
const salt = "We wouldn't be able to do so much OSS without sponsorship. 4334911177736731";
const key = scryptSync(password, salt, 24);
const ivBuffer = Buffer.from("2W1FmYsP56IKlASwYFisWA==", "base64");
const iv = new Uint8Array(ivBuffer.buffer, ivBuffer.byteOffset, ivBuffer.length);
const decipher = createDecipheriv(algorithm, key, iv);
const encrypted = ""
let decrypted;
try {
  decrypted = decipher.update(encrypted, 'base64', 'utf8') + decipher.final('utf8');
} catch (e) {
  console.error(
    `${errorPrefix}The value for the ${iSponsorGraphile} environmental variable (value: '${password.slice(
      0,
      2,
    )}...${password.slice(-2)}') is incorrect.${errorSuffix}`,
  );
  process.exit(42);
}

// Convince Node to allow ESM named imports
exports.makePgAdaptorWithPgClient = null /* placeholder */;
exports.makeWithPgClientViaPgClientAlreadyInTransaction = null /* placeholder */;
exports.createWithPgClient = null /* placeholder */;
exports.PgSubscriber = null /* placeholder */;
exports.makePgService = null /* placeholder */;

// Load our decrypted module
eval(decrypted);
