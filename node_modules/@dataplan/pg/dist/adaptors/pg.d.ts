import "../interfaces.js";
import type { GrafastSubscriber, PromiseOrDirect } from "grafast";
import type { Pool } from "pg";
import * as pg from "pg";
import type { WithPgClient } from "../executor.js";
import type { MakePgServiceOptions } from "../interfaces.js";
declare const $$isSetup: unique symbol;
declare const $$queue: unique symbol;
declare module "pg" {
    interface PoolClient {
        [$$queue]?: Promise<any> | null;
        [$$isSetup]?: true;
    }
}
export declare function makePgAdaptorWithPgClient(pool: Pool, release?: () => PromiseOrDirect<void>): WithPgClient;
export declare function makeWithPgClientViaPgClientAlreadyInTransaction(pgClient: pg.PoolClient, alreadyInTransaction?: boolean): WithPgClient;
export interface PgAdaptorOptions {
    poolClient?: pg.PoolClient;
    poolClientIsInTransaction?: boolean;
    superuserPoolClient?: pg.PoolClient;
    superuserPoolClientIsInTransaction?: boolean;
    pool?: Pool;
    poolConfig?: Omit<pg.PoolConfig, "connectionString">;
    connectionString?: string;
    superuserPool?: Pool;
    superuserConnectionString?: string;
}
export declare function createWithPgClient(options: PgAdaptorOptions, variant?: "SUPERUSER" | string | null): WithPgClient;
export declare class PgSubscriber<TTopics extends {
    [key: string]: string;
} = {
    [key: string]: string;
}> implements GrafastSubscriber<TTopics> {
    private pool;
    private topics;
    private eventEmitter;
    private alive;
    constructor(pool: Pool);
    private recordNotification;
    subscribe<TTopic extends keyof TTopics>(topic: TTopic): AsyncIterableIterator<TTopics[TTopic]>;
    private listen;
    private unlisten;
    private subscribedTopics;
    private sync;
    private syncWithClient;
    private resetClient;
    private listeningClient;
    private listeningClientPromise;
    private getClient;
    release(): void;
    private promise;
    private chain;
}
declare global {
    namespace Grafast {
        interface Context {
            pgSettings: {
                [key: string]: string;
            } | null;
            withPgClient: WithPgClient;
            pgSubscriber: PgSubscriber | null;
        }
    }
}
export declare function makePgService(options: MakePgServiceOptions & {
    pool?: pg.Pool;
}): GraphileConfig.PgServiceConfiguration;
export {};
//# sourceMappingURL=pg.d.ts.map