import type { PgSelectStep, PgUnionAllStep } from "./index";
export type PgLockableParameter = "orderBy" | "first" | "last" | "offset" | "groupBy";
export type PgLockCallback<TStep extends PgSelectStep<any> | PgUnionAllStep<any, any>> = (step: TStep) => void;
export declare class PgLocker<TStep extends PgSelectStep<any> | PgUnionAllStep<any, any>> {
    private parent;
    locked: boolean;
    constructor(parent: TStep);
    private _beforeLock;
    private _afterLock;
    private _lockedParameter;
    beforeLock(type: PgLockableParameter, callback: PgLockCallback<TStep>): void;
    afterLock(type: PgLockableParameter, callback: PgLockCallback<TStep>): void;
    private lockCallbacks;
    lockParameter(type: PgLockableParameter): void;
    assertParameterUnlocked(type: PgLockableParameter): void;
    lockAllParameters(): void;
    lock(): void;
}
//# sourceMappingURL=pgLocker.d.ts.map