import type { ExecutableStep, ExecutionEventEmitter, GrafastResultStreamList, GrafastValuesList, ObjectStep, PromiseOrDirect } from "grafast";
import type { SQLRawValue } from "pg-sql2";
export interface PgClientQuery {
    text: string;
    values?: Array<any>;
    arrayMode?: boolean;
    name?: string;
}
export interface PgClientResult<TData> {
    rows: readonly TData[];
    rowCount: number;
}
export interface PgClient {
    query<TData>(opts: PgClientQuery): Promise<PgClientResult<TData>>;
    withTransaction<T>(callback: (client: PgClient) => Promise<T>): Promise<T>;
}
export interface WithPgClient {
    <T>(pgSettings: {
        [key: string]: string;
    } | null, callback: (client: PgClient) => T | Promise<T>): Promise<T>;
    release?(): PromiseOrDirect<void>;
}
export type PgExecutorContext<TSettings = any> = {
    pgSettings: TSettings;
    withPgClient: WithPgClient;
};
export type PgExecutorContextPlans<TSettings = any> = {
    pgSettings: ExecutableStep<TSettings>;
    withPgClient: ExecutableStep<WithPgClient>;
};
export type PgExecutorInput<TInput> = {
    context: PgExecutorContext;
    queryValues: ReadonlyArray<TInput>;
};
export type PgExecutorOptions = {
    text: string;
    textForSingle?: string;
    rawSqlValues: Array<SQLRawValue>;
    identifierIndex?: number | null;
    name?: string;
    nameForSingle?: string;
    eventEmitter: ExecutionEventEmitter | undefined;
    useTransaction?: boolean;
};
export type PgExecutorMutationOptions = {
    context: PgExecutorContext;
    text: string;
    values: ReadonlyArray<SQLRawValue>;
};
export type PgExecutorSubscribeOptions = {
    context: PgExecutorContext;
    topic: string;
};
export declare class PgExecutor<TSettings = any> {
    name: string;
    private contextCallback;
    private $$cache;
    constructor(options: {
        name: string;
        context: () => ObjectStep<PgExecutorContextPlans<TSettings>>;
    });
    toString(): string;
    context(): ObjectStep<PgExecutorContextPlans<TSettings>>;
    private _executeWithClient;
    private _execute;
    private withTransaction;
    executeWithCache<TInput = any, TOutput = any>(values: GrafastValuesList<PgExecutorInput<TInput>>, common: PgExecutorOptions): Promise<{
        values: GrafastValuesList<ReadonlyArray<TOutput>>;
    }>;
    executeWithoutCache<TInput = any, TOutput = any>(values: GrafastValuesList<PgExecutorInput<TInput>>, common: PgExecutorOptions): Promise<{
        values: GrafastValuesList<ReadonlyArray<TOutput>>;
    }>;
    private _executeWithOrWithoutCache;
    executeStream<TInput = any, TOutput = any>(values: GrafastValuesList<PgExecutorInput<TInput>>, common: PgExecutorOptions): Promise<{
        streams: GrafastResultStreamList<TOutput>;
    }>;
    executeMutation<TData>(options: PgExecutorMutationOptions): Promise<PgClientResult<TData>>;
}
//# sourceMappingURL=executor.d.ts.map