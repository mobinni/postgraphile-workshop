import type { GrafastResultsList, GrafastValuesList, PolymorphicData, PolymorphicStep } from "grafast";
import { ExecutableStep } from "grafast";
import type { GraphQLObjectType } from "graphql";
import type { PgResource } from "../datasource.js";
import type { PgSelectSingleStep } from "./pgSelectSingle.js";
export declare class PgSingleTablePolymorphicStep<TResource extends PgResource<any, any, any, any, any>> extends ExecutableStep<unknown> implements PolymorphicStep {
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    private typeStepId;
    private rowStepId;
    constructor($typeName: ExecutableStep<string | null>, $row: PgSelectSingleStep<TResource>);
    private rowPlan;
    deduplicate(peers: PgSingleTablePolymorphicStep<any>[]): PgSingleTablePolymorphicStep<TResource>[];
    planForType(_type: GraphQLObjectType): ExecutableStep;
    execute(count: number, values: Array<GrafastValuesList<any>>): GrafastResultsList<PolymorphicData<string, ReadonlyArray<unknown[]>> | null>;
}
export declare function pgSingleTablePolymorphic<TResource extends PgResource<any, any, any, any, any>>($typeName: ExecutableStep<string | null>, $row: PgSelectSingleStep<TResource>): PgSingleTablePolymorphicStep<TResource>;
//# sourceMappingURL=pgSingleTablePolymorphic.d.ts.map