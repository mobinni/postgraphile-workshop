import type { EdgeCapableStep, ExecutableStep, ExecutionExtra } from "grafast";
import { UnbatchedExecutableStep } from "grafast";
import type { GraphQLObjectType } from "graphql";
import type { SQL } from "pg-sql2";
import type { ObjectFromPgCodecAttributes, PgCodecAttribute } from "../codecs.js";
import type { PgResource } from "../datasource.js";
import type { GetPgResourceAttributes, GetPgResourceCodec, GetPgResourceRelations, PgCodec, PgRegistry, PgTypedExecutableStep } from "../interfaces.js";
import type { PgClassExpressionStep } from "./pgClassExpression.js";
import { PgCursorStep } from "./pgCursor.js";
import type { PgSelectMode } from "./pgSelect.js";
import { PgSelectStep } from "./pgSelect.js";
export interface PgSelectSinglePlanOptions {
    fromRelation?: [PgSelectSingleStep<PgResource>, string];
}
export declare class PgSelectSingleStep<TResource extends PgResource<any, any, any, any, any> = PgResource> extends UnbatchedExecutableStep<unknown[]> implements PgTypedExecutableStep<TResource extends PgResource<any, infer UCodec, any, any, any> ? UCodec : never>, EdgeCapableStep<any> {
    private options;
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    readonly pgCodec: GetPgResourceCodec<TResource>;
    readonly itemStepId: number;
    readonly mode: PgSelectMode;
    private classStepId;
    private nullCheckId;
    readonly resource: TResource;
    private _coalesceToEmptyObject;
    private typeStepIndexList;
    constructor($class: PgSelectStep<TResource>, $item: ExecutableStep<unknown[]>, options?: PgSelectSinglePlanOptions);
    coalesceToEmptyObject(): void;
    toStringMeta(): string;
    getClassStep(): PgSelectStep<TResource>;
    private getItemStep;
    getSelfNamed(): PgClassExpressionStep<GetPgResourceCodec<TResource>, TResource>;
    get<TAttr extends keyof GetPgResourceAttributes<TResource>>(attr: TAttr): PgClassExpressionStep<GetPgResourceAttributes<TResource>[TAttr] extends PgCodecAttribute<infer UCodec, any> ? UCodec : never, TResource>;
    select<TExpressionCodec extends PgCodec>(fragment: SQL, codec: TExpressionCodec): PgClassExpressionStep<TExpressionCodec, TResource>;
    selectAndReturnIndex(fragment: SQL): number;
    placeholder($step: PgTypedExecutableStep<any>): SQL;
    placeholder($step: ExecutableStep, codec: PgCodec): SQL;
    private existingSingleRelation;
    singleRelation<TRelationName extends keyof GetPgResourceRelations<TResource>>(relationIdentifier: TRelationName): PgSelectSingleStep<GetPgResourceRelations<TResource>[TRelationName]["remoteResource"]>;
    manyRelation<TRelationName extends keyof GetPgResourceRelations<TResource>>(relationIdentifier: TRelationName): PgSelectStep<GetPgResourceRelations<TResource>[TRelationName]["remoteResource"]>;
    record(): PgClassExpressionStep<GetPgResourceCodec<TResource>, TResource>;
    expression<TExpressionCodec extends PgCodec>(expression: SQL, codec: TExpressionCodec): PgClassExpressionStep<TExpressionCodec, TResource>;
    getCursorDigestAndStep(): [string, ExecutableStep];
    cursor(): PgCursorStep<this>;
    node(): this;
    deduplicate(peers: PgSelectSingleStep<any>[]): PgSelectSingleStep<TResource>[];
    planForType(type: GraphQLObjectType): ExecutableStep;
    private nonNullAttribute;
    private nullCheckAttributeIndex;
    optimize(): this;
    finalize(): void;
    handlePolymorphism?: (result: any) => any;
    unbatchedExecute(_extra: ExecutionExtra, result: ObjectFromPgCodecAttributes<GetPgResourceAttributes<TResource>>): unknown[];
}
export declare function pgSelectFromRecord<TResource extends PgResource<any, PgCodec<any, any, any, any, any, any, any>, any, any, PgRegistry>>(resource: TResource, $record: PgClassExpressionStep<GetPgResourceCodec<TResource>, TResource>): PgSelectStep<TResource>;
export declare function pgSelectSingleFromRecord<TResource extends PgResource<any, any, any, any>>(resource: TResource, $record: PgClassExpressionStep<GetPgResourceCodec<TResource>, TResource>): PgSelectSingleStep<TResource>;
//# sourceMappingURL=pgSelectSingle.d.ts.map