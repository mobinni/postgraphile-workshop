import type { GrafastResultsList, GrafastValuesList } from "grafast";
import { ExecutableStep } from "grafast";
import type { PgClient, PgExecutor, WithPgClient } from "../executor";
export type WithPgClientStepCallback<TData, TResult> = (client: PgClient, data: TData) => Promise<TResult>;
export declare class WithPgClientStep<TData = any, TResult = any> extends ExecutableStep<TResult> {
    private callback;
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    hasSideEffects: boolean;
    readonly executor: PgExecutor;
    private contextId;
    private dataId;
    constructor(executor: PgExecutor, $data: ExecutableStep<TData>, callback: WithPgClientStepCallback<TData, TResult>);
    execute(_count: number, values: [
        GrafastValuesList<{
            pgSettings: any;
            withPgClient: WithPgClient;
        }>,
        GrafastValuesList<TData>
    ]): GrafastResultsList<TResult>;
}
export declare function withPgClient<TData, TResult>(executor: PgExecutor, $data: ExecutableStep<TData>, callback: WithPgClientStepCallback<TData, TResult>): WithPgClientStep<TData, TResult>;
export declare function withPgClientTransaction<TData, TResult>(executor: PgExecutor, $data: ExecutableStep<TData>, callback: WithPgClientStepCallback<TData, TResult>): WithPgClientStep<TData, TResult>;
//# sourceMappingURL=withPgClient.d.ts.map