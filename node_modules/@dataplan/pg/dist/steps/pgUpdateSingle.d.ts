import type { GrafastResultsList, GrafastValuesList, SetterStep } from "grafast";
import { ExecutableStep } from "grafast";
import type { SQL } from "pg-sql2";
import type { PgResource } from "../index.js";
import type { GetPgResourceAttributes, GetPgResourceCodec, GetPgResourceUniques, PlanByUniques } from "../interfaces.js";
import type { PgClassExpressionStep } from "./pgClassExpression.js";
export declare class PgUpdateSingleStep<TResource extends PgResource<any, any, any, any, any> = PgResource> extends ExecutableStep<unknown[]> {
    static $$export: {
        moduleName: string;
        exportName: string;
    };
    isSyncAndSafe: boolean;
    hasSideEffects: boolean;
    readonly resource: TResource;
    private readonly name;
    private readonly symbol;
    readonly alias: SQL;
    private getBys;
    private attributes;
    private contextId;
    private locked;
    private finalizeResults;
    private selects;
    constructor(resource: TResource, getBy: PlanByUniques<GetPgResourceAttributes<TResource>, GetPgResourceUniques<TResource>>, attributes?: {
        [key in keyof GetPgResourceAttributes<TResource>]?: ExecutableStep;
    });
    toStringMeta(): string | null;
    set<TKey extends keyof GetPgResourceAttributes<TResource>>(name: TKey, value: ExecutableStep): void;
    setPlan(): SetterStep<{
        [key in keyof GetPgResourceAttributes<TResource> & string]: ExecutableStep;
    }, this>;
    get<TAttr extends keyof GetPgResourceAttributes<TResource>>(attr: TAttr): PgClassExpressionStep<GetPgResourceAttributes<TResource>[TAttr]["codec"], TResource>;
    record(): PgClassExpressionStep<GetPgResourceCodec<TResource>, TResource>;
    selectAndReturnIndex(fragment: SQL): number;
    execute(_count: number, values: Array<GrafastValuesList<any>>): Promise<GrafastResultsList<any>>;
    finalize(): void;
}
export declare function pgUpdateSingle<TResource extends PgResource<any, any, any, any>>(resource: TResource, getBy: PlanByUniques<GetPgResourceAttributes<TResource>, GetPgResourceUniques<TResource>>, attributes?: {
    [key in keyof GetPgResourceAttributes<TResource>]?: ExecutableStep;
}): PgUpdateSingleStep<TResource>;
//# sourceMappingURL=pgUpdateSingle.d.ts.map