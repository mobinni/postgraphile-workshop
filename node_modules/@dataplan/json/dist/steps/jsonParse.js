"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonParse = exports.JSONParseStep = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const grafast_1 = require("grafast");
class JSONParseStep extends grafast_1.ExecutableStep {
    static { this.$$export = {
        moduleName: "@dataplan/json",
        exportName: "JSONParseStep",
    }; }
    constructor($stringPlan) {
        super();
        this.isSyncAndSafe = false;
        this.addDependency($stringPlan);
    }
    toStringMeta() {
        return chalk_1.default.bold.yellow(String(this.dependencies[0].id));
    }
    get(key) {
        return (0, grafast_1.access)(this, [key]);
    }
    at(index) {
        return (0, grafast_1.access)(this, [index]);
    }
    execute(count, values) {
        const result = [];
        const list = values[0];
        for (let i = 0; i < count; i++) {
            const v = list[i];
            if (typeof v === "string") {
                try {
                    result[i] = JSON.parse(v);
                }
                catch (e) {
                    result[i] = Promise.reject(e);
                }
            }
            else if (v == null) {
                result[i] = null;
            }
            else {
                result[i] = Promise.reject(new Error(`JSONParseStep: expected string to parse, but received ${Array.isArray(v) ? "array" : typeof v}`));
            }
        }
        return result;
    }
}
exports.JSONParseStep = JSONParseStep;
function jsonParse($string) {
    return new JSONParseStep($string);
}
exports.jsonParse = jsonParse;
(0, grafast_1.exportAs)("@dataplan/json", jsonParse, "jsonParse");
