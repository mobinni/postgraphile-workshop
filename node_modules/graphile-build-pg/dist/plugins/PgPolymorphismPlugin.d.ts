import "graphile-config";
import "./PgCodecsPlugin.js";
import "./PgProceduresPlugin.js";
import "./PgRelationsPlugin.js";
import "./PgTablesPlugin.js";
import type { PgCodec, PgCodecPolymorphism, PgCodecPolymorphismSingleTypeAttributeSpec } from "@dataplan/pg";
declare global {
    namespace GraphileConfig {
        interface GatherHelpers {
            pgPolymorphism: Record<string, never>;
        }
    }
    namespace GraphileBuild {
        interface ScopeInterface {
            pgCodec?: PgCodec<any, any, any, any, any, any, any>;
            isPgPolymorphicTableType?: boolean;
            pgPolymorphism?: PgCodecPolymorphism<string>;
        }
        interface ScopeObject {
            pgPolymorphism?: PgCodecPolymorphism<string>;
            pgPolymorphicSingleTableType?: {
                typeIdentifier: string;
                name: string;
                attributes: ReadonlyArray<PgCodecPolymorphismSingleTypeAttributeSpec>;
            };
            pgPolymorphicRelationalType?: {
                typeIdentifier: string;
                name: string;
            };
        }
        interface ScopeEnum {
            pgPolymorphicSingleTableType?: {
                typeIdentifier: string;
                name: string;
                attributes: ReadonlyArray<PgCodecPolymorphismSingleTypeAttributeSpec>;
            };
        }
    }
}
export declare const PgPolymorphismPlugin: GraphileConfig.Plugin;
//# sourceMappingURL=PgPolymorphismPlugin.d.ts.map